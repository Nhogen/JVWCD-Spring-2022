---
title: "EDA"
author: "JVWCD Capstone Group"
date: "1/23/2022"
output: 
  html_document:
    highlight: breezedark
    number_sections: yes
    toc: yes
    fig_width: 15
    fig_height: 10
editor_options: 
  chunk_output_type: inline
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Read Data

## Packages

```{r}
list.of.packages <- c("tidyverse", "lubridate","chron","knitr","corrplot","caret","scales","gridExtra")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)

library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
```

## Read CSV files and pre process

```{r}
#read in data. Change names to be more readable and make hourly demand numeric
sd <- read.csv("2_year_system_demand.csv")%>%
  rename('hourly_demand' = 'Hourly.Demand..cfs.',
         'date_time' = 'Read.Date.Time')%>%
  mutate(hourly_demand = as.numeric(hourly_demand),
         hourly_demand = ifelse(is.na(hourly_demand),0,hourly_demand)) #What do we do with NA's???

#Make Date and Time match a consistent format with the Weather Data
sd2 <- as.data.frame(str_split_fixed(sd$date_time, " ", 3))%>%
  rename(date = V1, time = V2, am_or_pm = V3)%>%
  mutate(datetime_str = paste(date, time, am_or_pm),
         datetime = as.POSIXct(strptime(datetime_str, format = "%m/%d/%y %I:%M %p")),
         datetime_military = strftime(datetime, format = "%m/%d/%Y %H:%M")) %>%
  select(datetime,datetime_military)
sd3 <-as.data.frame(str_split_fixed(sd2$datetime_military, " ", 2))%>%
  rename(date = V1, time = V2)
sd4 <-as.data.frame(str_split_fixed(sd3$date, "/", 3))%>%
  rename(CalendarMonth = V1,  CalendarDay = V2, CalendarYear = V3)
#Throw it all together
sd <- cbind(sd,sd2,sd3,sd4)%>%
  select(-date_time)
#Get rid of temp dfs
remove(sd2,sd3,sd4)

#The names and dates in this table do not need much conversion
wa <- read.csv("weather_sl_airport.csv")
  
  

sp <- read.csv("system_demand_by_point_type.csv")%>%
  rename('date_time' = 'Read.Date.Time',
         'well_flow_cfs' = 'Well.Flow..cfs.',
         'purchased_flow_cfs' = 'Purchased.Flow..cfs.',
         'transported_flow_cfs' = 'Transported.Flow..cfs.',
         'treated_flow_cfs' = 'Treated.Flow..cfs.',
         'injected_flow_cfs' = 'Injected.Flow..cfs.',
         'reservoir_trend_cfs' = 'Reservoir.Trend..cfs.',)
#Make Date and Time match a consistant format with the Weather Data
sp2 <- as.data.frame(str_split_fixed(sp$date_time, " ", 3))%>%
  rename(date = V1, time = V2, am_or_pm = V3)%>%
  mutate(datetime_str = paste(date, time, am_or_pm),
         datetime = as.POSIXct(strptime(datetime_str, format = "%m/%d/%y %I:%M %p")),
         datetime_military = strftime(datetime, format = "%m/%d/%Y %H:%M")) %>%
  select(datetime,datetime_military)
sp3 <-as.data.frame(str_split_fixed(sp2$datetime_military, " ", 2))%>%
  rename(date = V1, time = V2)
sp4 <-as.data.frame(str_split_fixed(sp3$date, "/", 3))%>%
  rename(CalendarMonth = V1,  CalendarDay = V2, CalendarYear = V3)
#Throw it all together
sp <- cbind(sp,sp2,sp3,sp4)%>%
  mutate(reservoir_trend_cfs = as.numeric(reservoir_trend_cfs))%>%
  select(-date_time)
#Get rid of temp dfs
remove(sp2,sp3,sp4)
```
> Something important to note is that the weather data is daily and demand data is hourly so we should ask if they want to change to hourly weather data or as how we want to agregate daily demand so we can match the grain for our model.

# 2 year system demand

```{r}
glimpse(sd)
summary(sd)
```

## Hourly Demand Histogram

```{r}
ggplot(sd,aes(hourly_demand))+
  geom_histogram()+
  theme_minimal()
```
> Demand seems to be heavily skewed towards the lower numbers. I wonder what happens if you change it to months or seasons.

## Hourly Demand Histogram by Calendar Month

```{r}
ggplot(sd,aes(hourly_demand))+
  geom_histogram()+
  theme_minimal()+
  facet_wrap(~CalendarMonth)
```

### Add a season variable to all tables

```{r}
sd <- sd%>%
  mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
                         ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
                                ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
                                       ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))))%>%
  filter(season != '0')


sp <- sp%>%
  mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
                         ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
                                ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
                                       ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))))%>%
  filter(season != '0')


wa <- wa%>%
  mutate(season = ifelse(CalendarMonth %in% c('3','4','5'), 'Spring',
                         ifelse(CalendarMonth %in% c('6','7','8'), 'Summer',
                                ifelse(CalendarMonth %in% c('9','10','11'), 'Fall',
                                       ifelse(CalendarMonth %in% c('12','1','2'), 'Winter','0')))))%>%
  filter(season != '0')
```


## Hourly Demand Histogram by season

```{r}
ggplot(sd,aes(hourly_demand))+
  geom_histogram()+
  theme_minimal()+
  facet_wrap(~season)
```

## Hourly Demand Histogram by Calendar year

```{r}
ggplot(sd,aes(hourly_demand))+
  geom_histogram()+
  theme_minimal()+
  facet_wrap(~CalendarYear)
```

> The difference between 2020 and 2021 don't seem very notable.

### Add Hour and Min columns

```{r}
sd2 <- as.data.frame(str_split_fixed(sd$time,':',2))%>%
  rename(Hour = V1, Min = V2)

sd <- cbind(sd,sd2)
```

## Average Hourly Demand

```{r}
sd%>%
  group_by(Hour)%>%
  summarise(mean(hourly_demand))%>%
  rename(avg_demand = 'mean(hourly_demand)')%>%
  ggplot(aes(Hour, avg_demand))+
  geom_col()+
  theme_minimal()
```
> Demand seems to drop towards the middle of the day

## Average Hourly Demand by Season

```{r}
sd%>%
  group_by(season,Hour)%>%
  summarise(mean(hourly_demand))%>%
  rename(avg_demand = 'mean(hourly_demand)')%>%
  ggplot(aes(Hour, avg_demand))+
  geom_col()+
  theme_minimal()+
  facet_wrap(~season)
```

> Seems like the Demand is higher in the summer as expected and seems to be higher earlier in the day.

## Average Hourly Demand by Season

```{r}
sd%>%
  group_by(season)%>%
  summarise(mean(hourly_demand))%>%
  rename(avg_demand = 'mean(hourly_demand)')%>%
  ggplot(aes(season, avg_demand))+
  geom_col()+
  theme_minimal()
```
> The average demand is way higherin the summer and the next highest is fall.

## Average Hourly Demand by Month

```{r}
sd%>%
  group_by(CalendarMonth)%>%
  summarise(mean(hourly_demand))%>%
  rename(avg_demand = 'mean(hourly_demand)')%>%
  ggplot(aes(CalendarMonth, avg_demand))+
  geom_col()+
  theme_minimal()
```
## Average Hourly Demand by Year

```{r}
sd%>%
  group_by(CalendarYear)%>%
  summarise(sum(hourly_demand))%>%
  rename(Sum_of_demand = 'sum(hourly_demand)')%>%
  ggplot(aes(CalendarYear, Sum_of_demand))+
  geom_col()+
  theme_minimal()
```

> It looks like 2020 had slightly more water demand.

# System Demand By Point Type

```{r}
glimpse(sp)
summary(sp)
```
## Average Well Flow by Season

```{r}
sp%>%
  group_by(season)%>%
  summarise(mean(well_flow_cfs))%>%
  rename(avg_demand = 'mean(well_flow_cfs)')%>%
  ggplot(aes(season, avg_demand))+
  geom_col()+
  theme_minimal()
```

## Average Purchased Flow by Season

```{r}
sp%>%
  group_by(season)%>%
  summarise(mean(purchased_flow_cfs))%>%
  rename(avg_demand = 'mean(purchased_flow_cfs)')%>%
  ggplot(aes(season, avg_demand))+
  geom_col()+
  theme_minimal()
```
## Average Transported Flow by Season

```{r}
sp%>%
  group_by(season)%>%
  summarise(mean(transported_flow_cfs))%>%
  rename(avg_demand = 'mean(transported_flow_cfs)')%>%
  ggplot(aes(season, avg_demand))+
  geom_col()+
  theme_minimal()
```
## Average Treated Flow by Season

```{r}
sp%>%
  group_by(season)%>%
  summarise(mean(treated_flow_cfs))%>%
  rename(avg_demand = 'mean(treated_flow_cfs)')%>%
  ggplot(aes(season, avg_demand))+
  geom_col()+
  theme_minimal()
```

## Average Injected Flow by Season

```{r}
sp%>%
  group_by(season)%>%
  summarise(mean(injected_flow_cfs))%>%
  rename(avg_demand = 'mean(injected_flow_cfs)')%>%
  ggplot(aes(season, avg_demand))+
  geom_col()+
  theme_minimal()
```

> Injected flow seems to only happen durring the winter

## Injected Flow Histogram

```{r}
ggplot(sp,aes(injected_flow_cfs))+
  geom_histogram()+
  theme_minimal()
```

> Seems like it's usually 0.

## Average Reservoir Flow by Season

```{r}
sp%>%
  group_by(season)%>%
  summarise(sum(reservoir_trend_cfs))%>%
  rename(sum_of_demand = 'sum(reservoir_trend_cfs)')%>%
  ggplot(aes(season, sum_of_demand))+
  geom_col()+
  theme_minimal()
```

> I did sum on this one becase it had a lot of weird negative and positive and I wanted to see how it corelated

## Reservoir Flow Histogram

```{r}
ggplot(sp,aes(reservoir_trend_cfs))+
  geom_histogram()+
  theme_minimal()
```


# Weather Data from Salt Lake Airport

```{r}
glimpse(wa)
summary(wa)
```

# System Demand joined to Weather Data from Salt Lake Airport

```{r}
sd1 <- sd%>%
  group_by(date)%>%
  summarise(daily_demand = mean(hourly_demand),
            CalendarMonth = CalendarMonth,
            CalendarDay = CalendarDay,
            CalendarYear = CalendarYear,
            season = season)

wa1 <- wa%>%
  select(-CalendarYear,-CalendarMonth,-CalendarDay,-season)%>%
  rename(date = WeatherDate)

wd <- merge(wa1,sd1,by="date")

#Get rid of temp dfs
remove(sd1,sd2,wa1)

summary(wd)

```

## Average Demand by TemperatureMean

```{r}
wd%>%
  group_by(TemperatureMean)%>%
  summarise(mean(daily_demand))%>%
  rename(avg_demand = 'mean(daily_demand)')%>%
  ggplot(aes(TemperatureMean, avg_demand))+
  geom_line()+
  theme_minimal()
```


## Average Demand by Depth of Snow

```{r}
wd%>%
  group_by(SnowDepth)%>%
  summarise(mean(daily_demand))%>%
  rename(avg_demand = 'mean(daily_demand)')%>%
  ggplot(aes(SnowDepth, avg_demand))+
  geom_col()+
  theme_minimal()
```

## Average Demand on rainy days vs non rainy

```{r}
wd%>%
  group_by(RainDays)%>%
  mutate(count_of_days = 1)%>%
  summarise(count_of_days = sum(count_of_days),
            mean(daily_demand))%>%
  rename(avg_demand = 'mean(daily_demand)')
```

## Average Demand on Snow days vs non Snow days

```{r}
wd%>%
  mutate(snow_day = ifelse(SnowFall>0,1,0))%>%
  group_by(snow_day)%>%
  mutate(count_of_days = 1)%>%
  summarise(count_of_days = sum(count_of_days),
            mean(daily_demand))%>%
  rename(avg_demand = 'mean(daily_demand)')
```

# Numeric Variable Examination 

### Factor Rain Days

```{r}
wd <- wd%>%
  mutate(RainDays = factor(RainDays))

```

## Relation to Daily Demand

```{r}
wdn <- wd%>%
  select_if(is.numeric)

#an attempt to manually look at the most important numberic vars
cwdn <- cor(wdn, use="pairwise.complete.obs")
cwdn1 <- data.frame(sort(cwdn[,'daily_demand'], decreasing = TRUE))

cwdn1%>%
  rename(Correlation = "sort.cwdn....daily_demand....decreasing...TRUE.")
```
## Correlation of logged mean temprature with logged daily demand

```{r}
ggplot(wdn, aes(log(TemperatureMean),log(daily_demand)))+
  geom_point()+ stat_smooth(method="lm", se=FALSE)

```

## Correlation of logged Precipitation with logged daily demand

```{r}
ggplot(wdn, aes(log(Precipitation),log(daily_demand)))+
  geom_point()+ stat_smooth(method="lm", se=FALSE)

```

## Correlation of logged SnowFall with logged daily demand

```{r}
ggplot(wdn, aes(log(SnowFall),log(daily_demand)))+
  geom_point()+ stat_smooth(method="lm", se=FALSE)

```



## Correlation of logged CoolingDegreeDays with logged daily demand

```{r}
ggplot(wdn, aes(log(CoolingDegreeDays),log(daily_demand)))+
  geom_point()+ stat_smooth(method="lm", se=FALSE)

```


```{r}


```

```{r}


```

```{r}


```
