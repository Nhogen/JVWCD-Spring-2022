---
title: "Model"
author: "JVWCD Capstone Group"
date: "3/29/2022"
output: 
  html_document:
    highlight: breezedark
    number_sections: yes
    toc: yes
    fig_width: 15
    fig_height: 10
editor_options: 
  chunk_output_type: inline
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Read Data

## Packages

```{r echo=T, results='hide', message=F, warning=F}
list.of.packages <- c("tidyverse",
                      "lubridate",
                      "chron",
                      "knitr",
                      "corrplot",
                      "caret",
                      "scales",
                      "gridExtra",
                      "useful",
                      "ISOweek",
                      "kableExtra")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)

library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
```

## Read CSV files and pre process

```{r echo=T, results='hide', message=F, warning=F}
#read in data. Change names to be more readable and make hourly demand numeric
sd <- read.csv("2_year_system_demand.csv")%>%
  rename('hourly_demand' = 'Hourly.Demand..cfs.',
         'date_time' = 'Read.Date.Time')%>%
  mutate(hourly_demand = as.numeric(hourly_demand),
         hourly_demand = ifelse(is.na(hourly_demand),0,hourly_demand)) #What do we do with NA's???

#Make Date and Time match a consistent format with the Weather Data
sd2 <- as.data.frame(str_split_fixed(sd$date_time, " ", 3))%>%
  rename(date = V1, time = V2, am_or_pm = V3)%>%
  mutate(datetime_str = paste(date, time, am_or_pm),
         datetime = as.POSIXct(strptime(datetime_str, format = "%m/%d/%y %I:%M %p")),
         datetime_military = strftime(datetime, format = "%m/%d/%Y %H:%M")) %>%
  select(datetime,datetime_military)
sd3 <-as.data.frame(str_split_fixed(sd2$datetime_military, " ", 2))%>%
  rename(date = V1, time = V2)
sd4 <-as.data.frame(str_split_fixed(sd3$date, "/", 3))%>%
  rename(CalendarMonth = V1,  CalendarDay = V2, CalendarYear = V3)
#Throw it all together
sd <- cbind(sd,sd2,sd3,sd4)%>%
  select(-date_time)
#Get rid of temp dfs
remove(sd2,sd3,sd4)

#The names and dates in this table do not need much conversion
wa <- read.csv("weather_sl_airport.csv")
  
  

sp <- read.csv("system_demand_by_point_type.csv")%>%
  rename('date_time' = 'Read.Date.Time',
         'well_flow_cfs' = 'Well.Flow..cfs.',
         'purchased_flow_cfs' = 'Purchased.Flow..cfs.',
         'transported_flow_cfs' = 'Transported.Flow..cfs.',
         'treated_flow_cfs' = 'Treated.Flow..cfs.',
         'injected_flow_cfs' = 'Injected.Flow..cfs.',
         'reservoir_trend_cfs' = 'Reservoir.Trend..cfs.',)
#Make Date and Time match a consistant format with the Weather Data
sp2 <- as.data.frame(str_split_fixed(sp$date_time, " ", 3))%>%
  rename(date = V1, time = V2, am_or_pm = V3)%>%
  mutate(datetime_str = paste(date, time, am_or_pm),
         datetime = as.POSIXct(strptime(datetime_str, format = "%m/%d/%y %I:%M %p")),
         datetime_military = strftime(datetime, format = "%m/%d/%Y %H:%M")) %>%
  select(datetime,datetime_military)
sp3 <-as.data.frame(str_split_fixed(sp2$datetime_military, " ", 2))%>%
  rename(date = V1, time = V2)
sp4 <-as.data.frame(str_split_fixed(sp3$date, "/", 3))%>%
  rename(CalendarMonth = V1,  CalendarDay = V2, CalendarYear = V3)
#Throw it all together
sp <- cbind(sp,sp2,sp3,sp4)%>%
  mutate(reservoir_trend_cfs = as.numeric(reservoir_trend_cfs))%>%
  select(-date_time)
#Get rid of temp dfs
remove(sp2,sp3,sp4)
```


## Add a Season Variable to All Tables

```{r}
sd <- sd%>%
  mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
                         ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
                                ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
                                       ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))))%>%
  filter(season != '0')


sp <- sp%>%
  mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
                         ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
                                ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
                                       ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))))%>%
  filter(season != '0')


wa <- wa%>%
  mutate(season = ifelse(CalendarMonth %in% c('3','4','5'), 'Spring',
                         ifelse(CalendarMonth %in% c('6','7','8'), 'Summer',
                                ifelse(CalendarMonth %in% c('9','10','11'), 'Fall',
                                       ifelse(CalendarMonth %in% c('12','1','2'), 'Winter','0')))))%>%
  filter(season != '0')
#This does filter out any values without a date.
```


## System Demand Joined to Weather Data from Salt Lake Airport

```{r}
#Snapshot View
sd1 <- sd%>%
  group_by(date)%>%
  summarise(daily_demand = mean(hourly_demand),
            CalendarMonth = CalendarMonth,
            CalendarDay = CalendarDay,
            CalendarYear = CalendarYear,
            season = season)

wa1 <- wa%>%
  select(-CalendarYear,-CalendarMonth,-CalendarDay,-season)%>%
  rename(date = WeatherDate)

wd <- merge(wa1,sd1,by="date")

# Factor RainDays
wd <- wd%>%
  mutate(RainDays = factor(RainDays))

#Get rid of temp dfs
remove(sd1,sd2,wa1)

kable(head(wd))
```


## Merge Data

```{r}
#Weather data begins prior to 2020 where the system data begins. Truncate for merging
merweth=wa %>% 
  filter(CalendarYear>=2020)
#Date column is a character. Convert to date
merweth=merweth %>% 
  mutate(WeatherDate = as.Date(WeatherDate,format="%m/%d/%Y"))
#Date column is in POSIXct format. Convert to date
mersd=sd %>% 
  mutate(ActualDate = as.Date(paste(as.numeric(sd$CalendarMonth),
                                    as.numeric(sd$CalendarDay),
                                    as.numeric(sd$CalendarYear),
                                    sep="-"),
                                    format="%m-%d-%Y"))
#Change hourly_demand to avg_daily demand for merge
mershrink=mersd %>% 
  group_by(ActualDate) %>% 
  summarize(avgdaily_demand = mean(hourly_demand))

#remove NA at the bottom
mershrink=mershrink[1:731,] 

#Note from Zach: We should change this so that it doesn't go by position so it can handle new data. Also should we replace the NA with mean or some other imputation or just get rid of it?

#Merge Datasets
merginated = merge(mershrink,merweth,by.x = "ActualDate",
                   by.y = "WeatherDate",all.y = TRUE,
                   all.x = FALSE)

kable(head(merginated))
```


## Add Hour and Min columns

```{r}
sd2 <- as.data.frame(str_split_fixed(sd$time,':',2))%>%
  rename(Hour = V1, Min = V2)

sd <- cbind(sd,sd2)

remove(sd2)
```



## Linear Regression to look at useful predictors

```{r}
#Clear out redundant columns
merginated=merginated[,c(1,2,8,9,12,13,14)]
mermod<-lm(avgdaily_demand~.,data = merginated)
summary(mermod)
```


## Precipitation by Week Number

```{r}
#Create ISO week number identifier column
merginated = merginated %>% 
  mutate(weeknum = ISOweek(ActualDate))
#Create list to show precipitation for a given ISO week number
weekref = merginated %>% 
  group_by(weeknum) %>% 
  summarize(weekfall = sum(Precipitation))
#Visualize
weekref %>% 
  ggplot(aes(weeknum,weekfall))+
  geom_col()+
  theme(axis.text.x = element_text(angle = 90))+
  ggtitle("Precipitation by Week Number")
#Seems a bit sporadic
```

## Linear Regression for impact of prevweekfall

prevweekfall is a variable that represents last weeks rainfall.

```{r}
#shift column so that list shows prior week precipitation
weekref = shift.column(weekref,columns = "weekfall",len = 1L,up=TRUE)
weekref = weekref[,c(1,3)]
weekref = weekref %>% 
  rename(prevweekfall = weekfall.Shifted)
#Merge list to create column showing rainfall by previous week
Merged_Data_Prevweek = merge(merginated,weekref,by.x = "weeknum",by.y = "weeknum",all.y = TRUE,all.x = TRUE)
mergiweek=Merged_Data_Prevweek[,c(2,3,4,6,7,8,9)]
merwod<-lm(avgdaily_demand~.,data = mergiweek)
#Simple regression showing variables with previous week rainfall included
summary(merwod)
#Does seem to be significant

#Remove temp data frames
remove(mergiweek,weekref,merwod,mermod,mersd,merweth,mershrink,merginated)
```


#Attempt at prevday/prev3day
```{r}


#Create
Mergiday = shift.column(Merged_Data_Prevweek,columns = 'avgdaily_demand',len = 1L,up=TRUE)
Mergiday = Mergiday %>% 
  rename(PrevDay = avgdaily_demand.Shifted)

Mergiday = Mergiday %>% 
  select(-one_of('prevweekfall','weeknum'))

#3 Days
moving_avg_3_rows <- function(x){
  (lag(x,3) + lag(x,2) + lag(x,1))/3
}

IfError <- function(code, silent = FALSE) {
  tryCatch(code, error = function(c) {
    if (!silent) {"Error Message"}
    else{code}})
}

Mergi3day = Merged_Data_Prevweek %>% 
  mutate(Prev3Day = ifelse(is.na(moving_avg_3_rows(avgdaily_demand)),avgdaily_demand,
                           moving_avg_3_rows(avgdaily_demand)))
Mergi3day = Mergi3day %>% 
  select(-one_of('prevweekfall','weeknum'))

day<-lm(avgdaily_demand~.,data = Mergiday)
day3<-lm(avgdaily_demand~.,data = Mergi3day)

summary(day)
summary(day3)

```

#Split Data
```{r}
#3 previous days
rsq <- function (x, y) cor(x, y) ^ 2
set.seed(123)
training_samples <- Mergi3day$avgdaily_demand %>% 
  createDataPartition(p = 0.7,list = FALSE)

Mergi3train <- Mergi3day[training_samples,]
Mergi3test <- Mergi3day[-training_samples,]

mod3 <- lm(avgdaily_demand ~., data=Mergi3train)

predictions <- mod3 %>% 
  predict(Mergi3test)

compare <- data.frame(actual = Mergi3test$avgdaily_demand,
                      predicted = predictions)

error <- RMSE(predictions,Mergi3test$avgdaily_demand)


rsq(compare$actual,compare$predicted)

#1 day = 0.961867
#2 days = 0.9728684
#3 days = 0.9758512
#4 days = 0.973445
#5 days = 0.9712492
#6 days = 0.9701669

```


```{r}
#Control (nothing added)
control = Merged_Data_Prevweek %>% 
  select(-one_of('prevweekfall','weeknum'))
rsq <- function (x, y) cor(x, y) ^ 2
set.seed(123)
training_samples <- control$avgdaily_demand %>% 
  createDataPartition(p = 0.7,list = FALSE)

Mergi3train <- control[training_samples,]
Mergi3test <- control[-training_samples,]

mod3 <- lm(avgdaily_demand ~., data=control)

predictions <- mod3 %>% 
  predict(Mergi3test)

compare <- data.frame(actual = Mergi3test$avgdaily_demand,
                      predicted = predictions)

error <- RMSE(predictions,Mergi3test$avgdaily_demand)


rsq(compare$actual,compare$predicted)
```


```{r}
#PrevDay
set.seed(123)
training_samples <- Mergiday$avgdaily_demand %>% 
  createDataPartition(p = 0.7,list = FALSE)

Mergitrain <- Mergiday[training_samples,]
Mergitest <- Mergiday[-training_samples,]

modprev <- lm(avgdaily_demand ~., data=Mergiday)

predictions <- modprev %>% 
  predict(Mergitest)

compare <- data.frame(actual = Mergitest$avgdaily_demand,
                      predicted = predictions)

error <- RMSE(predictions,Mergitest$avgdaily_demand)


rsq(compare$actual,compare$predicted)
```


