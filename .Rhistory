facet_wrap(~CalendarYear)
sd%>%
group_by(Hour)%>%
summarise(mean(hourly_demand))%>%
rename(avg_demand = 'mean(hourly_demand)')%>%
ggplot(aes(Hour, avg_demand))+
geom_col()+
theme_minimal()
sd%>%
group_by(season,Hour)%>%
summarise(mean(hourly_demand))%>%
rename(avg_demand = 'mean(hourly_demand)')%>%
ggplot(aes(Hour, avg_demand))+
geom_col()+
theme_minimal()+
facet_wrap(~season)
sd%>%
group_by(CalendarMonth,Hour)%>%
summarise(mean(hourly_demand))%>%
rename(avg_demand = 'mean(hourly_demand)')%>%
ggplot(aes(Hour, avg_demand))+
geom_col()+
theme_minimal()+
facet_wrap(~CalendarMonth)
sd%>%
group_by(season)%>%
summarise(mean(hourly_demand))%>%
rename(avg_demand = 'mean(hourly_demand)')%>%
ggplot(aes(season, avg_demand))+
geom_col()+
theme_minimal()
sd%>%
group_by(CalendarMonth)%>%
summarise(mean(hourly_demand))%>%
rename(avg_demand = 'mean(hourly_demand)')%>%
ggplot(aes(CalendarMonth, avg_demand))+
geom_col()+
theme_minimal()
sd%>%
group_by(CalendarYear)%>%
summarise(sum(hourly_demand))%>%
rename(Sum_of_demand = 'sum(hourly_demand)')%>%
ggplot(aes(CalendarYear, Sum_of_demand))+
geom_col()+
theme_minimal()
kable(head(sp))
glimpse(sp)
summary(sp)
sp%>%
group_by(season)%>%
summarise(mean(well_flow_cfs))%>%
rename(avg_demand = 'mean(well_flow_cfs)')%>%
ggplot(aes(season, avg_demand))+
geom_col()+
theme_minimal()
sp%>%
group_by(season)%>%
summarise(mean(purchased_flow_cfs))%>%
rename(avg_demand = 'mean(purchased_flow_cfs)')%>%
ggplot(aes(season, avg_demand))+
geom_col()+
theme_minimal()
sp%>%
group_by(season)%>%
summarise(mean(transported_flow_cfs))%>%
rename(avg_demand = 'mean(transported_flow_cfs)')%>%
ggplot(aes(season, avg_demand))+
geom_col()+
theme_minimal()
sp%>%
group_by(season)%>%
summarise(mean(treated_flow_cfs))%>%
rename(avg_demand = 'mean(treated_flow_cfs)')%>%
ggplot(aes(season, avg_demand))+
geom_col()+
theme_minimal()
sp%>%
group_by(season)%>%
summarise(mean(injected_flow_cfs))%>%
rename(avg_demand = 'mean(injected_flow_cfs)')%>%
ggplot(aes(season, avg_demand))+
geom_col()+
theme_minimal()
ggplot(sp,aes(injected_flow_cfs))+
geom_histogram()+
theme_minimal()
sp%>%
group_by(season)%>%
summarise(sum(reservoir_trend_cfs))%>%
rename(sum_of_demand = 'sum(reservoir_trend_cfs)')%>%
ggplot(aes(season, sum_of_demand))+
geom_col()+
theme_minimal()
ggplot(sp,aes(reservoir_trend_cfs))+
geom_histogram()+
theme_minimal()
glimpse(wa)
summary(wa)
#Clear out redundant columns
merginated=merginated[,c(1,2,8,9,12,13,14)]
mermod<-lm(avgdaily_demand~.,data = merginated)
summary(mermod)
#Create ISO week number identifier column
merginated = merginated %>%
mutate(weeknum = ISOweek(ActualDate))
#Create list to show precipitation for a given ISO week number
weekref = merginated %>%
group_by(weeknum) %>%
summarize(weekfall = sum(Precipitation))
#Visualize
weekref %>%
ggplot(aes(weeknum,weekfall))+
geom_col()+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("Precipitation by Week Number")
#Seems a bit sporadic
#shift column so that list shows prior week precipitation
weekref = shift.column(weekref,columns = "weekfall",len = 1L,up=TRUE)
weekref = weekref[,c(1,3)]
weekref = weekref %>%
rename(prevweekfall = weekfall.Shifted)
#Merge list to create column showing rainfall by previous week
Merged_Data_Prevweek = merge(merginated,weekref,by.x = "weeknum",by.y = "weeknum",all.y = TRUE,all.x = TRUE)
mergiweek=Merged_Data_Prevweek[,c(2,3,4,6,7,8,9)]
merwod<-lm(avgdaily_demand~.,data = mergiweek)
#Simple regression showing variables with previous week rainfall included
summary(merwod)
#Does seem to be significant
#Remove temp data frames
remove(mergiweek,weekref,merwod,mermod,mersd,merweth,mershrink,merginated)
#Create
Mergiday = shift.column(Merged_Data_Prevweek,columns = 'avgdaily_demand',len = 1L,up=TRUE)
Mergiday = Mergiday %>%
rename(PrevDay = avgdaily_demand.Shifted)
Mergiday = Mergiday %>%
select(-one_of('prevweekfall','weeknum'))
#3 Days
moving_avg_3_rows <- function(x){
(lag(x,3) + lag(x,2) + lag(x,1))/3
}
IfError <- function(code, silent = FALSE) {
tryCatch(code, error = function(c) {
if (!silent) {"Error Message"}
else{code}})
}
Mergi3day = Merged_Data_Prevweek %>%
mutate(Prev3Day = ifelse(is.na(moving_avg_3_rows(avgdaily_demand)),avgdaily_demand,
moving_avg_3_rows(avgdaily_demand)))
Mergi3day = Mergi3day %>%
select(-one_of('prevweekfall','weeknum'))
day<-lm(avgdaily_demand~.,data = Mergiday)
day3<-lm(avgdaily_demand~.,data = Mergi3day)
summary(day)
summary(day3)
#3 previous days
rsq <- function (x, y) cor(x, y) ^ 2
set.seed(123)
training_samples <- Mergi3day$avgdaily_demand %>%
createDataPartition(p = 0.7,list = FALSE)
Mergi3train <- Mergi3day[training_samples,]
Mergi3test <- Mergi3day[-training_samples,]
mod3 <- lm(avgdaily_demand ~., data=Mergi3train)
predictions <- mod3 %>%
predict(Mergi3test)
compare <- data.frame(actual = Mergi3test$avgdaily_demand,
predicted = predictions)
error <- RMSE(predictions,Mergi3test$avgdaily_demand)
rsq(compare$actual,compare$predicted)
#1 day = 0.961867
#2 days = 0.9728684
#3 days = 0.9758512
#4 days = 0.973445
#5 days = 0.9712492
#6 days = 0.9701669
#Control (nothing added)
control = Merged_Data_Prevweek %>%
select(-one_of('prevweekfall','weeknum'))
rsq <- function (x, y) cor(x, y) ^ 2
set.seed(123)
training_samples <- control$avgdaily_demand %>%
createDataPartition(p = 0.7,list = FALSE)
Mergi3train <- control[training_samples,]
Mergi3test <- control[-training_samples,]
mod3 <- lm(avgdaily_demand ~., data=control)
predictions <- mod3 %>%
predict(Mergi3test)
compare <- data.frame(actual = Mergi3test$avgdaily_demand,
predicted = predictions)
error <- RMSE(predictions,Mergi3test$avgdaily_demand)
rsq(compare$actual,compare$predicted)
#PrevDay
set.seed(123)
training_samples <- Mergiday$avgdaily_demand %>%
createDataPartition(p = 0.7,list = FALSE)
Mergitrain <- Mergiday[training_samples,]
Mergitest <- Mergiday[-training_samples,]
modprev <- lm(avgdaily_demand ~., data=Mergiday)
predictions <- modprev %>%
predict(Mergitest)
compare <- data.frame(actual = Mergitest$avgdaily_demand,
predicted = predictions)
error <- RMSE(predictions,Mergitest$avgdaily_demand)
rsq(compare$actual,compare$predicted)
wd%>%
group_by(TemperatureMean)%>%
summarise(mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
ggplot(aes(TemperatureMean, avg_demand))+
geom_col()+
theme_minimal()
wd%>%
group_by(SnowDepth)%>%
summarise(mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
ggplot(aes(SnowDepth, avg_demand))+
geom_col()+
theme_minimal()
wd%>%
group_by(RainDays)%>%
mutate(count_of_days = 1)%>%
summarise(count_of_days = sum(count_of_days),
mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
kable()
wd%>%
mutate(snow_day = ifelse(SnowFall>0,1,0))%>%
group_by(snow_day)%>%
mutate(count_of_days = 1)%>%
summarise(count_of_days = sum(count_of_days),
mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
kable()
wdn <- wd%>%
select_if(is.numeric)
#an attempt to manually look at the most important numberic vars
cwdn <- cor(wdn, use="pairwise.complete.obs")
cwdn1 <- data.frame(sort(cwdn[,'daily_demand'], decreasing = TRUE))
cwdn1%>%
rename(Correlation = "sort.cwdn....daily_demand....decreasing...TRUE.")%>%
kable()
#Calculate correlation
dfcor <- cor(wdn[,unlist(lapply(df, is.numeric))])
#Plot the correlation
#Only Select Numeric Variables
df_numericVars <- which(sapply(wdn, is.numeric))
#correlations of all numeric variables
df_numVar <- wdn[, df_numericVars]
df_cor_numVar <- cor(df_numVar, use="pairwise.complete.obs")
# Correlation of numeric variables with their numbers and shap/color relation to sale price
corrplot.mixed(df_cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7)
corrplot(df_cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7, method = "number")
ggplot(wdn, aes(log(TemperatureMean),log(daily_demand)))+
geom_point()+ stat_smooth(method="lm", se=FALSE)
ggplot(wdn, aes(log(Precipitation),log(daily_demand)))+
geom_point()+ stat_smooth(method="lm", se=FALSE)
ggplot(wdn, aes(log(SnowFall),log(daily_demand)))+
geom_point()+ stat_smooth(method="lm", se=FALSE)
ggplot(wdn, aes(log(CoolingDegreeDays),log(daily_demand)))+
geom_point()+ stat_smooth(method="lm", se=FALSE)
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra",
"matrixStats",
"rminer")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
library(matrixStats)
library(rminer)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
#RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
glimpse(wa)
summary(wa)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1')%>%#Clifton said this is a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
glimpse(sd)
summary(sd)
predictions <- mod%>%
predict(test)
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra",
"matrixStats",
"rminer")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
library(matrixStats)
library(rminer)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
#RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
glimpse(wa)
summary(wa)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1')%>%#Clifton said this is a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
glimpse(sd)
summary(sd)
wd <- merge(wa,sd,by="date")
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate,-ReadDate)
moving_avg_3_rows <- function(x){
(lag(x,3) + lag(x,2) + lag(x,1))/3
}
#ChangeDay
#moving_avg_3_rows <- function(x){
#  (lag(x,14) + lag(x,13) + lag(x,12) + lag(x,11) + lag(x,10) + lag(x,9) + lag(x,8) + lag(x,7) + lag(x,6) + lag(x,5) + lag(x,4) + lag(x,3) + lag(x,2) + lag(x,1))/14
#}
rsq <- function (x, y) cor(x, y) ^ 2
#Change everything to Prevday
PrevDayAll = shift.column(mgd_avg,columns =c('TemperatureMean',
'TemperatureMax',
'TemperatureMin',
'Precipitation',
'CoolingDegreeDays',
'SnowDepth',
'SnowFall',
'RainDays'),len = 1L,up=TRUE)
#Remove unshifted columns
PrevDayAll = PrevDayAll %>%
select(-one_of('TemperatureMean',
'TemperatureMax',
'TemperatureMin',
'Precipitation',
'CoolingDegreeDays',
'SnowDepth',
'SnowFall',
'RainDays'))
#Rename Columns
PrevDayAll = PrevDayAll %>%
rename(PrevDayMeanTemp = TemperatureMean.Shifted,
PrevDayMaxTemp = TemperatureMax.Shifted,
PrevDayMinTemp = TemperatureMin.Shifted,
PrevDayRain = Precipitation.Shifted,
PrevDayCoolingDegDays = CoolingDegreeDays.Shifted,
PrevDaySnowDepth = SnowDepth.Shifted,
PrevDaySnowFall = SnowFall.Shifted,
PrevDayRainDay = RainDays.Shifted,)
glimpse(PrevDayAll)
summary(PrevDayAll)
rainwk <- mgd_avg %>%
mutate(Week_no = format(date, "%U"))%>%
group_by(Week_no)%>%
summarize(RainWeek = as.factor(ifelse(sum(RainDays)>0,1,0)))
mgd_avg <- mgd_avg %>%
mutate(Week_no = as.factor(format(date, "%U")))
mgd_avg <- dplyr::left_join(mgd_avg,rainwk,by="Week_no")
mgd_avg <- mgd_avg%>% select(-Week_no)
glimpse(mgd_avg)
summary(mgd_avg)
Avg3 = mgd_avg %>%
mutate(Precip3Day = ifelse(is.na(moving_avg_3_rows(Precipitation)),Precipitation,
moving_avg_3_rows(Precipitation)),
Tempmean3Day = ifelse(is.na(moving_avg_3_rows(TemperatureMean)),TemperatureMean,
moving_avg_3_rows(TemperatureMean)),
SnowDepth3Day = ifelse(is.na(moving_avg_3_rows(SnowDepth)),SnowDepth,
moving_avg_3_rows(SnowDepth)))%>%
select(-one_of('TemperatureMean',#Remove un averaged columns
'Precipitation',
'SnowDepth'))
glimpse(Avg3)
summary(Avg3)
mgd_avg <- mgd_avg%>%
select(-date,
-CalendarYear,
-CalendarMonth,
-CalendarDay)%>%
mutate(season = as.factor(season))
Avg3 <- Avg3%>%
select(-date,
-CalendarYear,
-CalendarMonth,
-CalendarDay)%>%
mutate(season = as.factor(season))
PrevDayAll <- PrevDayAll%>%
select(-date,
-CalendarYear,
-CalendarMonth,
-CalendarDay)%>%
mutate(season = as.factor(season))
set.seed(6496)
#mgd_avg
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- Avg3[ti,]
test <- Avg3[-ti,]
#Avg3
ti1 <- createDataPartition(Avg3$avg_demand_mgd, p=0.7,
list = FALSE)
train_Avg3 <- Avg3[ti1,]
test_Avg3 <- Avg3[-ti1,]
#PrevDayAll
ti2 <- createDataPartition(PrevDayAll$avg_demand_mgd, p=0.7,
list = FALSE)
train_PrevDayAll <- PrevDayAll[ti2,]
test_PrevDayAll <- PrevDayAll[-ti2,]
mod <- lm(avg_demand_mgd ~., data=train)
summary(mod)
predictions <- mod%>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
mod_Avg3 <- lm(avg_demand_mgd ~., data=train_Avg3)
summary(mod_Avg3)
predictions <- mod_Avg3 %>%
predict(test_Avg3)
compare <- data.frame(actual = test_Avg3$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test_Avg3$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#Value with 1day is 0.8821361
#Value with 2day is 0.8898740
#Value with 3day is 0.8968115
#Value with 4day is 0.8968564
#Value with 5day is 0.8933539
#Value with 6day is 0.8908162
#Value with 7day is 0.8930895
#Value with 8day is 0.8951116
#Value with 9day is 0.8942761
#Value with 10dayis 0.8927353
#Value with 11dayis 0.8925998
#Value with 12dayis 0.8906925
#Value with 13dayis 0.8905605
#Value with 14dayis 0.8901907
mod_PrevDayAll <- lm(avg_demand_mgd ~., data=train_PrevDayAll)
summary(mod_PrevDayAll)
predictions <- mod_PrevDayAll%>%
predict(test_PrevDayAll)
compare <- data.frame(actual = test_PrevDayAll$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test_PrevDayAll$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
View(sd)
View(wd)
