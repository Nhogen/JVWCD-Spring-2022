knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra",
"matrixStats",
"rminer",
"mltools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
library(matrixStats)
library(rminer)
library(mltools)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('3','4','5'), 'Spring',
ifelse(CalendarMonth %in% c('6','7','8'), 'Summer',
ifelse(CalendarMonth %in% c('9','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','1','2'), 'Winter','0')))),
#RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"),
RainDays = ifelse(Precipitation < 0.05, 0 , RainDays),
Precipitation = ifelse(Precipitation < 0.05, 0 , Precipitation))%>%
filter(CalendarYear>=2020)
summary(wa)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Min.Daily.Demand..mgd.')%>%#Clifton said this is a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
summary(sd)
wd <- merge(wa,sd,by="date")
summary(wd)
data <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate,-ReadDate)
summary(data)
data <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate,-ReadDate, -season)
summary(data)
oldData <- data %>%
filter(CalendarYear == 2020 & CalendarYear == 2021)
summary(oldData)
actuals<- data %>%
filter(CalendarYear == 2020 & CalendarYear == 2021)
summary(actuals)
actuals<- data %>%
filter(CalendarYear == 2020 | CalendarYear == 2021)
summary(actuals)
actuals<- data %>%
filter(CalendarYear == 2020 | CalendarYear == 2021) %>%
select(-date, -CalendarYear, -CalendarMonth, -CalendarDay)
summary(actuals)
actuals<- data %>%
filter(CalendarYear == 2020 | CalendarYear == 2021) %>%
select(-date, -CalendarYear, -CalendarMonth, -CalendarDay, -TemperatureMax, -TemperatureMin)
summary(actuals)
current <- data %>%
filter(CalendarYear == 2022) #%>%
summary(current)
current <- data %>%
filter(CalendarYear == 2022) %>%
select(-date, -CalendarYear, -CalendarMonth, -CalendarDay, -TemperatureMax, -TemperatureMin)
summary(current)
actuals <- data %>%
filter(CalendarYear == 2020 | CalendarYear == 2021) %>%
select(-date, -CalendarYear, -CalendarMonth, -CalendarDay, -TemperatureMax, -TemperatureMin) %>%
rename('avg_demand_mdg' = "Demand")
actuals <- data %>%
filter(CalendarYear == 2020 | CalendarYear == 2021) %>%
select(-date, -CalendarYear, -CalendarMonth, -CalendarDay, -TemperatureMax, -TemperatureMin) %>%
rename(avg_demand_mdg = "Demand")
actuals <- data %>%
filter(CalendarYear == 2020 | CalendarYear == 2021) %>%
select(-date, -CalendarYear, -CalendarMonth, -CalendarDay, -TemperatureMax, -TemperatureMin) %>%
rename(avg_demand_mdg = Demand)
actuals <- data %>%
filter(CalendarYear == 2020 | CalendarYear == 2021) %>%
select(-date, -CalendarYear, -CalendarMonth, -CalendarDay, -TemperatureMax, -TemperatureMin) %>%
rename(avg_demand_mgd = Demand)
actuals <- rename(actuals, avg_demand_mgd, Demand)
actuals <- rename(actuals, 'avg_demand_mgd', 'Demand')
actuals <- rename(actuals, 'Demand', 'avg_demand_mgd')
actuals <- rename(actuals, avg_demand_mgd = Demand)
actuals <- data %>%
filter(CalendarYear == 2020 | CalendarYear == 2021) %>%
select(-date, -CalendarYear, -CalendarMonth, -CalendarDay, -TemperatureMax, -TemperatureMin) %>%
rename('avg_demand_mgd' = 'Demand')
basicModel <- lm(avg_demand_mgd ~., actuals)
basicModel
summary(basicModel)
pred <- predict(basicModel, current)
compare <- data.frame(actual = actuals$avg_demand_mgd,
predicted = pred)
error <- RMSE(pred,actuals$avg_demand_mgd)
ttarg<-actuals$avg_demand_mgd
mmetric(ttarg,pred,metrics_list)
metrics_list = c("R2","MAE","MAPE","RMSE")
mmetric(ttarg,pred,metrics_list)
summary(pred)
summary(current)
compare <- data.frame(actual = current$avg_demand_mgd,
predicted = pred)
compare
error <- RMSE(pred,current$avg_demand_mgd)
error
ttarg<-current$avg_demand_mgd
metrics_list = c("R2","MAE","MAPE","RMSE")
mmetric(ttarg,pred,metrics_list)
compare
plot(pred, current$avg_demand_mgd)
plot(pred)
plot(current$avg_demand_mgd)
plot(pred)
plot(pred, col = 'red')
plot(current$avg_demand_mgd)
plot(pred, col = 'red', current$avg_demand_mgd)
caretModel <- train(avg_demand_mgd ~., data = actuals, method = "lm")
caretModel
summary(caretModel)
caretModel
summary(caretModel)
caretModel
mmetric(ttarg,pred,metrics_list)
metrics_list = c("R2","MAE","MAPE","RMSE", "ACC")
mmetric(ttarg,pred,metrics_list)
metrics_list = c("R2","MAE","MAPE","RMSE", "ACC")
mmetric(ttarg,pred,metrics_list)
metrics_list = c("R2","MAE","MAPE","RMSE")
mmetric(ttarg,pred,metrics_list)
summary(basicModel)
basicModel <- lm(avg_demand_mgd ~ TemperatureMean + CoolingDegreeDays + SnowDepth, actuals)
summary(basicModel)
pred <- predict(basicModel, current)
summary(pred)
(compare <- data.frame(actual = current$avg_demand_mgd,
predicted = pred))
(error <- RMSE(pred,current$avg_demand_mgd))
ttarg<-current$avg_demand_mgd
metrics_list = c("R2","MAE","MAPE","RMSE")
mmetric(ttarg,pred,metrics_list)
basicModel <- lm(avg_demand_mgd ~ ., actuals)
summary(basicModel)
data20 <- data %>%
filter(CalendarYear == 2020)
View(data20)
View(data20)
q120 <- data20 %>%
filter(CalendarMonth == 1 | CalendarMonth == 2 | CalendarMonth == 3)
View(q120)
View(q120)
data21 <- data %>%
filter(CalendarYear == 2021)
q121 <- data21 %>%
filter(CalendarMonth == 1 | CalendarMonth == 2 | CalendarMonth == 3)
q120 <- data20 %>%
filter(CalendarMonth == 1 | CalendarMonth == 2 | CalendarMonth == 3) %>%
select(-date, -CalendarYear, -CalendarMonth, -CalendarDay, -TemperatureMax, -TemperatureMin)
q121 <- data21 %>%
filter(CalendarMonth == 1 | CalendarMonth == 2 | CalendarMonth == 3) %>%
select(-date, -CalendarYear, -CalendarMonth, -CalendarDay, -TemperatureMax, -TemperatureMin)
q1model <- lm(avg_demand_mgd ~., data = q120)
summary(q1model)
pred <- predict(q1model, q121)
q120model <- lm(avg_demand_mgd ~., data = q120)
summary(q1model)
pred <- predict(q120model, q121)
(compare <- data.frame(actual = current$avg_demand_mgd,
predicted = pred))
(compare <- data.frame(actual = q121$avg_demand_mgd,
predicted = pred))
(error <- RMSE(pred,q121$avg_demand_mgd))
ttarg<-q121$avg_demand_mgd
metrics_list = c("R2","MAE","MAPE","RMSE")
mmetric(ttarg,pred,metrics_list)
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra",
"matrixStats",
"rminer",
"mltools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
library(matrixStats)
library(rminer)
library(mltools)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('3','4','5'), 'Spring',
ifelse(CalendarMonth %in% c('6','7','8'), 'Summer',
ifelse(CalendarMonth %in% c('9','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','1','2'), 'Winter','0')))),
#RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"),
RainDays = ifelse(Precipitation < 0.05, 0 , RainDays),
Precipitation = ifelse(Precipitation < 0.05, 0 , Precipitation))%>%
filter(CalendarYear>=2020)
summary(wa)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Min.Daily.Demand..mgd.')%>%#Clifton said this is a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
summary(sd)
wd <- merge(wa,sd,by="date")
summary(wd)
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate,-ReadDate)
moving_avg_3_rows <- function(x){
lag(x,4) + (lag(x,3) + lag(x,2) + lag(x,1))/4
}
#ChangeDay
#moving_avg_3_rows <- function(x){
#  (lag(x,14) + lag(x,13) + lag(x,12) + lag(x,11) + lag(x,10) + lag(x,9) + lag(x,8) + lag(x,7) + lag(x,6) + lag(x,5) + lag(x,4) + lag(x,3) + lag(x,2) + lag(x,1))/14
#}
rsq <- function (x, y) cor(x, y) ^ 2
rainwk <- mgd_avg %>%
mutate(Week_no = format(date, "%U"))%>%
group_by(Week_no)%>%
summarize(RainWeek = as.factor(ifelse(sum(RainDays)>0,1,0)))
mgd_avg <- mgd_avg %>%
mutate(Week_no = as.factor(format(date, "%U")),
RainDays = as.factor(RainDays),
season = as.factor(season))
mgd_avg <- dplyr::left_join(mgd_avg,rainwk,by="Week_no")
mgd_avg <- mgd_avg%>% select(-Week_no)
glimpse(mgd_avg)
summary(mgd_avg)
Avg3 = mgd_avg %>%
mutate(Precip3Day = ifelse(is.na(moving_avg_3_rows(Precipitation)),Precipitation,
moving_avg_3_rows(Precipitation)),
Tempmean3Day = ifelse(is.na(moving_avg_3_rows(TemperatureMean)),TemperatureMean,
moving_avg_3_rows(TemperatureMean)))%>%
select(-one_of('TemperatureMean',#Remove un averaged columns
'Precipitation',
'SnowDepth'))
glimpse(Avg3)
View(Avg3)
View(Avg3)
summary(Avg3)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra",
"matrixStats",
"rminer",
"mltools",
"zoo")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
library(matrixStats)
library(rminer)
library(mltools)
library(zoo)
avg3update <- mgd_avg %>%
mutate(TempMean3Day = rollmean(TemperatureMean, k = 3, fill = NA))
View(avg3update)
View(avg3update)
summary(avg3update)
View(mgd_avg)
View(mgd_avg)
# 3 Day Precip Mean Calculations
avg3update <- mdg_avg %>%
mutate(Precip3Day = rollmean(Precipitation, k = 3, fill = NA))
# 3 Day Precip Mean Calculations
avg3update <- mgd_avg %>%
mutate(Precip3Day = rollmean(Precipitation, k = 3, fill = NA))
summary(avg3update)
summary(avg3update)
# 3 Day Precip Mean Calculations
avg3update <- avg3update %>%
mutate(Precip3Day = rollmean(Precipitation, k = 3, fill = NA))
summary(avg3update)
# 3 Day Temp Mean Calculations
avg3update <- mgd_avg %>%
mutate(TempMean3Day = rollmean(TemperatureMean, k = 3, fill = NA))
summary(avg3update)
# 3 Day Precip Mean Calculations
avg3update <- avg3update %>%
mutate(Precip3Day = rollmean(Precipitation, k = 3, fill = NA))
summary(avg3update)
avg3update <- avg3update %>%
select(-Precipitation, -TemperatureMax, -TemperatureMin, -TemperatureMean)
summary(avg3update)
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra",
"matrixStats",
"rminer",
"mltools",
"zoo")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
library(matrixStats)
library(rminer)
library(mltools)
library(zoo)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('3','4','5'), 'Spring',
ifelse(CalendarMonth %in% c('6','7','8'), 'Summer',
ifelse(CalendarMonth %in% c('9','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','1','2'), 'Winter','0')))),
#RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"),
RainDays = ifelse(Precipitation < 0.05, 0 , RainDays),
Precipitation = ifelse(Precipitation < 0.05, 0 , Precipitation))%>%
filter(CalendarYear>=2020)
summary(wa)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Min.Daily.Demand..mgd.')%>%#Clifton said this is a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
summary(sd)
wd <- merge(wa,sd,by="date")
summary(wd)
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate,-ReadDate)
# 3 Day Temp Mean Calculations
avg3update <- mgd_avg %>%
mutate(TempMean3Day = rollmean(TemperatureMean, k = 3, fill = NA))
summary(avg3update)
# 3 Day Precip Mean Calculations
avg3update <- avg3update %>%
mutate(Precip3Day = rollmean(Precipitation, k = 3, fill = NA))
summary(avg3update)
# Remove Temp and Precip variables
avg3update <- avg3update %>%
select(-Precipitation, -TemperatureMax, -TemperatureMin, -TemperatureMean)
summary(avg3update)
summary(avg3update)
rsq <- function (x, y) cor(x, y) ^ 2
Avg3_2022 <- avg3update %>%
filter(CalendarYear == 2022)%>%
select(-date,
-CalendarYear,
-CalendarMonth,
-CalendarDay)%>%
mutate(season = as.factor(season))
Avg3 <- avg3update %>%
filter(CalendarYear != 2022)%>%
select(-date,
-CalendarYear,
-CalendarMonth,
-CalendarDay)%>%
mutate(season = as.factor(season))
avg3update <- avg3update %>%
filter(CalendarYear != 2022)%>%
select(-date,
-CalendarYear,
-CalendarMonth,
-CalendarDay)%>%
mutate(season = as.factor(season))
rm(Avg3)
# Modeling
model <- lm(avg_demand_mgd ~., data = avg3update)
summary(model)
# 2022 Predictions
pred <- predict(model, Avg3_2022)
summary(pred)
(compare <- data.frame(actual = Avg3_2022$avg_demand_mgd,
predicted = pred))
error <- RMSE(pred,Avg3_2022$avg_demand_mgd)
(error <- RMSE(pred,Avg3_2022$avg_demand_mgd))
ttarg<-Avg3_2022$avg_demand_mgd
mmetric(ttarg,trainpred,metrics_list)
# 2022 Predictions
metrics_list = c("R2","MAE","MAPE","RMSE")
mmetric(ttarg,trainpred,metrics_list)
mmetric(ttarg,pred,metrics_list)
summary(model)
summary(pred)
(compare <- data.frame(actual = Avg3_2022$avg_demand_mgd,
predicted = pred))
# Replace NA with mean prediction
pred[is.na(pred)]<-mean(pred,na.rm=TRUE)
summary(pred)
(compare <- data.frame(actual = Avg3_2022$avg_demand_mgd,
predicted = pred))
(error <- RMSE(pred,Avg3_2022$avg_demand_mgd))
ttarg<-Avg3_2022$avg_demand_mgd
mmetric(ttarg,pred,metrics_list)
(compare <- data.frame(actual = Avg3_2022$avg_demand_mgd,
predicted = pred))
summary(model)
