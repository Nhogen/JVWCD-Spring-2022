mersd=sd %>%
mutate(ActualDate = as.Date(paste(as.numeric(sd$CalendarMonth),
as.numeric(sd$CalendarDay),
as.numeric(sd$CalendarYear),
sep="-"),
format="%m-%d-%Y"))
#Change hourly_demand to avg_daily demand for merge
mershrink=mersd %>%
group_by(ActualDate) %>%
summarize(avgdaily_demand = mean(hourly_demand))
#remove NA at the bottom
mershrink=mershrink[1:731,]
#Note from Zach: We should change this so that it doesn't go by position so it can handle new data. Also should we replace the NA with mean or some other imputation or just get rid of it?
#Merge Datasets
merginated = merge(mershrink,merweth,by.x = "ActualDate",
by.y = "WeatherDate",all.y = TRUE,
all.x = FALSE)
head(merginated)
#Weather data begins prior to 2020 where the system data begins. Truncate for merging
merweth=wa %>%
filter(CalendarYear>=2020)
#Date column is a character. Convert to date
merweth=merweth %>%
mutate(WeatherDate = as.Date(WeatherDate,format="%m/%d/%Y"))
#Date column is in POSIXct format. Convert to date
mersd=sd %>%
mutate(ActualDate = as.Date(paste(as.numeric(sd$CalendarMonth),
as.numeric(sd$CalendarDay),
as.numeric(sd$CalendarYear),
sep="-"),
format="%m-%d-%Y"))
#Change hourly_demand to avg_daily demand for merge
mershrink=mersd %>%
group_by(ActualDate) %>%
summarize(avgdaily_demand = mean(hourly_demand))
#Weather data begins prior to 2020 where the system data begins. Truncate for merging
merweth=wa %>%
filter(CalendarYear>=2020)
#Date column is a character. Convert to date
merweth=merweth %>%
mutate(WeatherDate = as.Date(WeatherDate,format="%m/%d/%Y"))
#Date column is in POSIXct format. Convert to date
mersd=sd %>%
mutate(ActualDate = as.Date(paste(as.numeric(sd$CalendarMonth),
as.numeric(sd$CalendarDay),
as.numeric(sd$CalendarYear),
sep="-"),
format="%m-%d-%Y"))
#Change hourly_demand to avg_daily demand for merge
mershrink=mersd %>%
group_by(ActualDate) %>%
summarize(avgdaily_demand = mean(hourly_demand))
summary(mershrink)
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
wa <- read.csv("weather_slc_airport.csv")%>%
mutate(RainDays = factor(RainDays),
WeatherDate = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(RainDays = factor(RainDays),
WeatherDate = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
sd <- read.csv("new_system_demand.csv")
sd <- read.csv("new_daily_demand.csv")
glimpse(sd)
summarize(sd)
sd <- read.csv("new_daily_demand.csv")
glimpse(sd)
summary(sd)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Min.Daily.Demand..mgd.',)
glimpse(sd)
summary(sd)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)#assumed this was a min
glimpse(sd)
summary(sd)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(ReadDate = as.Date(ReadDate,format="%m/%d/%Y"))
glimpse(sd)
summary(sd)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(ReadDate = as.Date(ReadDate,format="%m/%d/%Y"))
sd2 <-as.data.frame(str_split_fixed(sd$ReadDate, "-", 3))%>%
rename(CalendarMonth = V1,  CalendarDay = V2, CalendarYear = V3)
glimpse(sd2)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(ReadDate = as.Date(ReadDate,format="%m/%d/%Y"))
sd <- cbind(sd,sd2)
## These variables are redundant to the date column and should not be used in a model
sd2 <-as.data.frame(str_split_fixed(sd$ReadDate, "-", 3))%>%
rename(CalendarMonth = V1,  CalendarDay = V2, CalendarYear = V3)%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))))%>%
filter(season != '0'),
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(ReadDate = as.Date(ReadDate,format="%m/%d/%Y"))
sd <- cbind(sd,sd2)
## These variables are redundant to the date column and should not be used in a model
sd2 <-as.data.frame(str_split_fixed(sd$ReadDate, "-", 3))%>%
rename(CalendarMonth = V1,  CalendarDay = V2, CalendarYear = V3)%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
CalendarMonth = as.factor(CalendarMonth),
CalendarDay = as.factor(CalendarDay),
CalendarYear = as.factor(CalendarYear))
remove(sd2)
glimpse(sd2)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(ReadDate = as.Date(ReadDate,format="%m/%d/%Y"))
sd <- cbind(sd,sd2)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(ReadDate = as.Date(ReadDate,format="%m/%d/%Y"))
sd <- cbind(sd,sd2)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(RainDays = factor(RainDays),
WeatherDate = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(ReadDate = as.Date(ReadDate,format="%m/%d/%Y"))
## These variables are redundant to the date column and should not be used in a model
sd2 <-as.data.frame(str_split_fixed(sd$ReadDate, "-", 3))%>%
rename(CalendarMonth = V1,  CalendarDay = V2, CalendarYear = V3)%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
CalendarMonth = as.factor(CalendarMonth),
CalendarDay = as.factor(CalendarDay),
CalendarYear = as.factor(CalendarYear))%>%
filter(season != '0')
sd <- cbind(sd,sd2)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(ReadDate = as.Date(ReadDate,format="%m/%d/%Y"))
## These variables are redundant to the date column and should not be used in a model
sd2 <-as.data.frame(str_split_fixed(sd$ReadDate, "-", 3))%>%
rename(CalendarMonth = V1,  CalendarDay = V2, CalendarYear = V3)%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
CalendarMonth = as.factor(CalendarMonth),
CalendarDay = as.factor(CalendarDay),
CalendarYear = as.factor(CalendarYear))
sd <- cbind(sd,sd2)%>%
filter(season != '0')
remove(sd2)
glimpse(sd2)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(ReadDate = as.Date(ReadDate,format="%m/%d/%Y"))
## These variables are redundant to the date column and should not be used in a model
sd2 <-as.data.frame(str_split_fixed(sd$ReadDate, "-", 3))%>%
rename(CalendarMonth = V1,  CalendarDay = V2, CalendarYear = V3)%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
CalendarMonth = as.factor(CalendarMonth),
CalendarDay = as.factor(CalendarDay),
CalendarYear = as.factor(CalendarYear))
sd <- cbind(sd,sd2)%>%
filter(season != '0')
remove(sd2)
glimpse(sd)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(ReadDate = as.Date(ReadDate,format="%m/%d/%Y"))
## These variables are redundant to the date column and should not be used in a model
sd2 <-as.data.frame(str_split_fixed(sd$ReadDate, "-", 3))%>%
rename(CalendarMonth = V1,  CalendarDay = V2, CalendarYear = V3)%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
CalendarMonth = as.factor(CalendarMonth),
CalendarDay = as.factor(CalendarDay),
CalendarYear = as.factor(CalendarYear))
sd <- cbind(sd,sd2)
remove(sd2)
glimpse(sd)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(RainDays = factor(RainDays),
WeatherDate = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(ReadDate = as.Date(ReadDate,format="%m/%d/%Y"))
## These variables are redundant to the date column and should not be used in a model
sd2 <-as.data.frame(str_split_fixed(sd$ReadDate, "-", 3))%>%
rename(CalendarYear = V1,  CalendarMonth = V2, CalendarDay = V3)%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
CalendarMonth = as.factor(CalendarMonth),
CalendarDay = as.factor(CalendarDay),
CalendarYear = as.factor(CalendarYear))
sd <- cbind(sd,sd2)
sd <- sd%>%
filter(season != '0')
remove(sd2)
glimpse(sd)
wd <- merge(wa,sd,by="date")
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
## These variables are redundant to the date column and should not be used in a model
sd2 <-as.data.frame(str_split_fixed(sd$date, "-", 3))%>%
rename(CalendarYear = V1,  CalendarMonth = V2, CalendarDay = V3)%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
CalendarMonth = as.factor(CalendarMonth),
CalendarDay = as.factor(CalendarDay),
CalendarYear = as.factor(CalendarYear))
sd <- cbind(sd,sd2)
sd <- sd%>%
filter(season != '0')
remove(sd2)
glimpse(sd)
wd <- merge(wa,sd,by="date")
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
sd2 <-as.data.frame(str_split_fixed(sd$date, "-", 3))%>%
rename(CalendarYear = V1,  CalendarMonth = V2, CalendarDay = V3)%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
CalendarMonth = as.factor(CalendarMonth),
CalendarDay = as.factor(CalendarDay),
CalendarYear = as.factor(CalendarYear))
sd <- cbind(sd,sd2)
sd <- sd%>%
filter(season != '0')
remove(sd2)
glimpse(sd)
summary(sd)
print(sd)
print(wd)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1',)%>%#assumed this was a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
wd <- merge(wa,sd,by="date")
print(wd)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1')%>%#assumed this was a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
wd <- merge(wa,sd,by="date")
print(wd)
wd <- merge(wa,sd,by="date")%>%
select(-WeatherDate)
print(wd)
print(wd)
set.seed(6496)
d <- createDataPartition(wd$avg_demand_cfs, p.0.7,
list = FALSE)
set.seed(6496)
d <- createDataPartition(wd$avg_demand_cfs, p=0.7,
list = FALSE)
train <- d[d,]
set.seed(6496)
ti <- createDataPartition(wd$avg_demand_cfs, p=0.7,
list = FALSE)
train <- wd[ti,]
test <- wd[-ti,]
summary(train)
