"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra",
"matrixStats",
"rminer")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
library(matrixStats)
library(rminer)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
#RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
glimpse(wa)
summary(wa)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1')%>%#Clifton said this is a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
glimpse(sd)
summary(sd)
wd <- merge(wa,sd,by="date")
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate,-ReadDate)
moving_avg_3_rows <- function(x){
(lag(x,3) + lag(x,2) + lag(x,1))/3
}
rsq <- function (x, y) cor(x, y) ^ 2
#Change everything to Prevday
PrevDayAll = shift.column(mgd_avg,columns =c('TemperatureMean',
'TemperatureMax',
'TemperatureMin',
'Precipitation',
'CoolingDegreeDays',
'SnowDepth',
'SnowFall',
'RainDays'),len = 1L,up=TRUE)
#Remove unshifted columns
PrevDayAll = PrevDayAll %>%
select(-one_of('TemperatureMean',
'TemperatureMax',
'TemperatureMin',
'Precipitation',
'CoolingDegreeDays',
'SnowDepth',
'SnowFall',
'RainDays'))
#Rename Columns
PrevDayAll = PrevDayAll %>%
rename(PrevDayMeanTemp = TemperatureMean.Shifted,
PrevDayMaxTemp = TemperatureMax.Shifted,
PrevDayMinTemp = TemperatureMin.Shifted,
PrevDayRain = Precipitation.Shifted,
PrevDayCoolingDegDays = CoolingDegreeDays.Shifted,
PrevDaySnowDepth = SnowDepth.Shifted,
PrevDaySnowFall = SnowFall.Shifted,
PrevDayRainDay = RainDays.Shifted,)
glimpse(PrevDayAll)
summary(PrevDayAll)
rainwk <- mgd_avg %>%
mutate(Week_no = format(date, "%U"))%>%
group_by(Week_no)%>%
summarize(RainWeek = as.factor(ifelse(sum(RainDays)>0,1,0)))
mgd_avg <- mgd_avg %>%
mutate(Week_no = as.factor(format(date, "%U")))
mgd_avg <- dplyr::left_join(mgd_avg,rainwk,by="Week_no")
mgd_avg%>% select(-Week_no)
glimpse(mgd_avg)
summary(mgd_avg)
rainwk <- mgd_avg %>%
mutate(Week_no = format(date, "%U"))%>%
group_by(Week_no)%>%
summarize(RainWeek = as.factor(ifelse(sum(RainDays)>0,1,0)))
mgd_avg <- mgd_avg %>%
mutate(Week_no = as.factor(format(date, "%U")))
mgd_avg <- dplyr::left_join(mgd_avg,rainwk,by="Week_no")
mgd_avg <- mgd_avg%>% select(-Week_no)
glimpse(mgd_avg)
summary(mgd_avg)
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra",
"matrixStats",
"rminer")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
library(matrixStats)
library(rminer)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
#RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
glimpse(wa)
summary(wa)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1')%>%#Clifton said this is a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
glimpse(sd)
summary(sd)
wd <- merge(wa,sd,by="date")
wd <- merge(wa,sd,by="date")
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate,-ReadDate)
moving_avg_3_rows <- function(x){
(lag(x,3) + lag(x,2) + lag(x,1))/3
}
rsq <- function (x, y) cor(x, y) ^ 2
#Change everything to Prevday
PrevDayAll = shift.column(mgd_avg,columns =c('TemperatureMean',
'TemperatureMax',
'TemperatureMin',
'Precipitation',
'CoolingDegreeDays',
'SnowDepth',
'SnowFall',
'RainDays'),len = 1L,up=TRUE)
#Remove unshifted columns
PrevDayAll = PrevDayAll %>%
select(-one_of('TemperatureMean',
'TemperatureMax',
'TemperatureMin',
'Precipitation',
'CoolingDegreeDays',
'SnowDepth',
'SnowFall',
'RainDays'))
#Rename Columns
PrevDayAll = PrevDayAll %>%
rename(PrevDayMeanTemp = TemperatureMean.Shifted,
PrevDayMaxTemp = TemperatureMax.Shifted,
PrevDayMinTemp = TemperatureMin.Shifted,
PrevDayRain = Precipitation.Shifted,
PrevDayCoolingDegDays = CoolingDegreeDays.Shifted,
PrevDaySnowDepth = SnowDepth.Shifted,
PrevDaySnowFall = SnowFall.Shifted,
PrevDayRainDay = RainDays.Shifted,)
glimpse(PrevDayAll)
summary(PrevDayAll)
rainwk <- mgd_avg %>%
mutate(Week_no = format(date, "%U"))%>%
group_by(Week_no)%>%
summarize(RainWeek = as.factor(ifelse(sum(RainDays)>0,1,0)))
mgd_avg <- mgd_avg %>%
mutate(Week_no = as.factor(format(date, "%U")))
mgd_avg <- dplyr::left_join(mgd_avg,rainwk,by="Week_no")
mgd_avg <- mgd_avg%>% select(-Week_no)
glimpse(mgd_avg)
summary(mgd_avg)
Avg3 = mgd_avg %>%
mutate(Precip3Day = ifelse(is.na(moving_avg_3_rows(Precipitation)),Precipitation,
moving_avg_3_rows(Precipitation)),
Tempmean3Day = ifelse(is.na(moving_avg_3_rows(TemperatureMean)),TemperatureMean,
moving_avg_3_rows(TemperatureMean)),
SnowDepth3Day = ifelse(is.na(moving_avg_3_rows(SnowDepth)),SnowDepth,
moving_avg_3_rows(SnowDepth)))%>%
select(-one_of('TemperatureMean',#Remove un averaged columns
'Precipitation',
'SnowDepth'))
glimpse(Avg3)
summary(Avg3)
set.seed(6496)
#mgd_avg
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- Avg3[ti,]
test <- Avg3[-ti,]
#Avg3
ti1 <- createDataPartition(Avg3$avg_demand_mgd, p=0.7,
list = FALSE)
train_Avg3 <- Avg3[ti1,]
test_Avg3 <- Avg3[-ti1,]
#PrevDayAll
ti2 <- createDataPartition(PrevDayAll$avg_demand_mgd, p=0.7,
list = FALSE)
train_PrevDayAll <- PrevDayAll[ti2,]
test_PrevDayAll <- PrevDayAll[-ti2,]
mod <- lm(avg_demand_mgd ~., data=train)
summary(mod)
predictions <- mod%>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
mod_Avg3 <- lm(avg_demand_mgd ~., data=train_Avg3)
summary(mod_Avg3)
predictions <- mod_Avg3 %>%
predict(test_Avg3)
compare <- data.frame(actual = test_Avg3$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test_Avg3$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
mod_PrevDayAll <- lm(avg_demand_mgd ~., data=train_PrevDayAll)
summary(mod_PrevDayAll)
predictions <- mod_PrevDayAll%>%
predict(test_PrevDayAll)
compare <- data.frame(actual = test_PrevDayAll$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test_PrevDayAll$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
mgd_avg <- mgd_avg%>%
select(-date,
-CalendarYear,
-CalendarMonth,
-CalendarDay)%>%
mutate(season = as.factor(season))
#Avg3 <- Avg3%>%
#PrevDayAll <- PrevDayAll%>%
set.seed(6496)
#mgd_avg
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- Avg3[ti,]
test <- Avg3[-ti,]
#Avg3
ti1 <- createDataPartition(Avg3$avg_demand_mgd, p=0.7,
list = FALSE)
train_Avg3 <- Avg3[ti1,]
test_Avg3 <- Avg3[-ti1,]
#PrevDayAll
ti2 <- createDataPartition(PrevDayAll$avg_demand_mgd, p=0.7,
list = FALSE)
train_PrevDayAll <- PrevDayAll[ti2,]
test_PrevDayAll <- PrevDayAll[-ti2,]
mod <- lm(avg_demand_mgd ~., data=train)
summary(mod)
predictions <- mod%>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
mgd_avg <- mgd_avg%>%
select(-date,
-CalendarYear,
-CalendarMonth,
-CalendarDay)%>%
mutate(season = as.factor(season))
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra",
"matrixStats",
"rminer")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
library(matrixStats)
library(rminer)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
#RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
glimpse(wa)
summary(wa)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1')%>%#Clifton said this is a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
glimpse(sd)
summary(sd)
wd <- merge(wa,sd,by="date")
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate,-ReadDate)
moving_avg_3_rows <- function(x){
(lag(x,3) + lag(x,2) + lag(x,1))/3
}
rsq <- function (x, y) cor(x, y) ^ 2
#Change everything to Prevday
PrevDayAll = shift.column(mgd_avg,columns =c('TemperatureMean',
'TemperatureMax',
'TemperatureMin',
'Precipitation',
'CoolingDegreeDays',
'SnowDepth',
'SnowFall',
'RainDays'),len = 1L,up=TRUE)
#Remove unshifted columns
PrevDayAll = PrevDayAll %>%
select(-one_of('TemperatureMean',
'TemperatureMax',
'TemperatureMin',
'Precipitation',
'CoolingDegreeDays',
'SnowDepth',
'SnowFall',
'RainDays'))
#Rename Columns
PrevDayAll = PrevDayAll %>%
rename(PrevDayMeanTemp = TemperatureMean.Shifted,
PrevDayMaxTemp = TemperatureMax.Shifted,
PrevDayMinTemp = TemperatureMin.Shifted,
PrevDayRain = Precipitation.Shifted,
PrevDayCoolingDegDays = CoolingDegreeDays.Shifted,
PrevDaySnowDepth = SnowDepth.Shifted,
PrevDaySnowFall = SnowFall.Shifted,
PrevDayRainDay = RainDays.Shifted,)
glimpse(PrevDayAll)
summary(PrevDayAll)
rainwk <- mgd_avg %>%
mutate(Week_no = format(date, "%U"))%>%
group_by(Week_no)%>%
summarize(RainWeek = as.factor(ifelse(sum(RainDays)>0,1,0)))
mgd_avg <- mgd_avg %>%
mutate(Week_no = as.factor(format(date, "%U")))
mgd_avg <- dplyr::left_join(mgd_avg,rainwk,by="Week_no")
mgd_avg <- mgd_avg%>% select(-Week_no)
glimpse(mgd_avg)
summary(mgd_avg)
Avg3 = mgd_avg %>%
mutate(Precip3Day = ifelse(is.na(moving_avg_3_rows(Precipitation)),Precipitation,
moving_avg_3_rows(Precipitation)),
Tempmean3Day = ifelse(is.na(moving_avg_3_rows(TemperatureMean)),TemperatureMean,
moving_avg_3_rows(TemperatureMean)),
SnowDepth3Day = ifelse(is.na(moving_avg_3_rows(SnowDepth)),SnowDepth,
moving_avg_3_rows(SnowDepth)))%>%
select(-one_of('TemperatureMean',#Remove un averaged columns
'Precipitation',
'SnowDepth'))
glimpse(Avg3)
summary(Avg3)
mgd_avg <- mgd_avg%>%
select(-date,
-CalendarYear,
-CalendarMonth,
-CalendarDay)%>%
mutate(season = as.factor(season))
Avg3 <- Avg3%>%
select(-date,
-CalendarYear,
-CalendarMonth,
-CalendarDay)%>%
mutate(season = as.factor(season))
PrevDayAll <- PrevDayAll%>%
select(-date,
-CalendarYear,
-CalendarMonth,
-CalendarDay)%>%
mutate(season = as.factor(season))
set.seed(6496)
#mgd_avg
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- Avg3[ti,]
test <- Avg3[-ti,]
#Avg3
ti1 <- createDataPartition(Avg3$avg_demand_mgd, p=0.7,
list = FALSE)
train_Avg3 <- Avg3[ti1,]
test_Avg3 <- Avg3[-ti1,]
#PrevDayAll
ti2 <- createDataPartition(PrevDayAll$avg_demand_mgd, p=0.7,
list = FALSE)
train_PrevDayAll <- PrevDayAll[ti2,]
test_PrevDayAll <- PrevDayAll[-ti2,]
set.seed(6496)
#mgd_avg
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- Avg3[ti,]
test <- Avg3[-ti,]
#Avg3
ti1 <- createDataPartition(Avg3$avg_demand_mgd, p=0.7,
list = FALSE)
train_Avg3 <- Avg3[ti1,]
test_Avg3 <- Avg3[-ti1,]
#PrevDayAll
ti2 <- createDataPartition(PrevDayAll$avg_demand_mgd, p=0.7,
list = FALSE)
train_PrevDayAll <- PrevDayAll[ti2,]
test_PrevDayAll <- PrevDayAll[-ti2,]
mod <- lm(avg_demand_mgd ~., data=train)
summary(mod)
predictions <- mod%>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
mod_Avg3 <- lm(avg_demand_mgd ~., data=train_Avg3)
summary(mod_Avg3)
predictions <- mod_Avg3 %>%
predict(test_Avg3)
compare <- data.frame(actual = test_Avg3$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test_Avg3$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
mod_PrevDayAll <- lm(avg_demand_mgd ~., data=train_PrevDayAll)
summary(mod_PrevDayAll)
predictions <- mod_PrevDayAll%>%
predict(test_PrevDayAll)
compare <- data.frame(actual = test_PrevDayAll$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test_PrevDayAll$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
