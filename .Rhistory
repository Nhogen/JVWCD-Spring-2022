library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
library(matrixStats)
library(rminer)
library(mltools)
library(zoo)
library(RWeka)
library(kernlab)
MLP <- make_Weka_classifier("weka/classifiers/functions/MultilayerPerceptron")
# R2
rsq <- function (x, y) cor(x, y) ^ 2
# Performance Metrics
metrics_list = c("R2","MAE","MAPE","RMSE")
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra",
"matrixStats",
"rminer",
"mltools",
"zoo",
"RWeka",
"kernlab")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
library(matrixStats)
library(rminer)
library(mltools)
library(zoo)
library(RWeka)
library(kernlab)
MLP <- make_Weka_classifier("weka/classifiers/functions/MultilayerPerceptron")
# R2
rsq <- function (x, y) cor(x, y) ^ 2
# Performance Metrics
metrics_list = c("R2","MAE","MAPE","RMSE")
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('3','4','5'), 'Spring',
ifelse(CalendarMonth %in% c('6','7','8'), 'Summer',
ifelse(CalendarMonth %in% c('9','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','1','2'), 'Winter','0')))),
#RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"),
RainDays = ifelse(Precipitation < 0.05, 0 , RainDays),
Precipitation = ifelse(Precipitation < 0.05, 0 , Precipitation))%>%
filter(CalendarYear>=2020)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Min.Daily.Demand..mgd.')%>%#Clifton said this is a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
wd <- merge(wa,sd,by="date")
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate,-ReadDate)
rainwk <- mgd_avg%>%
mutate(Week_no = format(date, "%U"))%>%
group_by(Week_no)%>%
summarize(RainWeek = as.factor(ifelse(sum(RainDays)>0,1,0)))
mgd_avg <- mgd_avg %>%
mutate(Week_no = as.factor(format(date, "%U")),
RainDays = as.factor(RainDays),
season = as.factor(season))
mgd_avg <- dplyr::left_join(mgd_avg,rainwk,by="Week_no")
mgd_avg <- mgd_avg%>% select(-Week_no)
# Rollmean 4 Day Average Calculations
Avg4 <- mgd_avg %>%
mutate(TempMean4Day = rollmean(TemperatureMean, k = 4, fill = mean(TemperatureMean)),
Precip4Day = rollmean(Precipitation, k = 4, fill = mean(Precipitation)),
SnowDepth4Day = rollmean(SnowDepth, k = 4, fill = mean(SnowDepth)))%>%
select(-Precipitation, -TemperatureMean, -SnowDepth)
summary(Avg4)
Avg4g <- Avg4%>%
mutate(
avg_demand_mgd = log(avg_demand_mgd),
TemperatureMax = log(TemperatureMax),
TemperatureMin = log(TemperatureMin),
CoolingDegreeDays = ifelse(CoolingDegreeDays >= 1,
log(CoolingDegreeDays),
CoolingDegreeDays
),
SnowFall = ifelse(SnowFall >= 0.01,
log(SnowFall),
SnowFall
),
TempMean4Day = log(TempMean4Day),
Precip4Day = ifelse(Precip4Day >= 0.01,
log(Precip4Day),
Precip4Day
),
SnowDepth4Day = ifelse(SnowDepth4Day >= 0.01,
log(SnowDepth4Day),
SnowDepth4Day
),
season = as.factor(season),
CalendarMonth = as.factor(CalendarMonth)
)%>%
select(-date,
-CalendarYear,
#-CalendarMonth,
-CalendarDay)
# Spring
Avg4_Sp <- Avg4%>%
filter(season == 'Spring')
# Summer
Avg4_Su <- Avg4%>%
filter(season == 'Summer')
# Fall
Avg4_F <- Avg4%>%
filter(season == 'Fall')
# Winter is coming
Avg4_W <- Avg4%>%
filter(season == 'Winter')
# Only 2022
Avg4_2022 <- Avg4%>%
filter(CalendarYear == 2022)
# Remove 2022
#Avg4 <- Avg4%>%
#  filter(CalendarYear != 2022)
summary(Avg4)
set.seed(6496)
#Avg4
ti <- createDataPartition(Avg4$avg_demand_mgd, p=0.8,
list = FALSE)
train <- Avg4[ti,]
test <- Avg4[-ti,]
mod1 <- lm(avg_demand_mgd ~ ., data=train)
# Train
trainpred <- mod1%>%
predict(train)
compare <- data.frame(actual = train$avg_demand_mgd,
predicted = trainpred)
error <- RMSE(trainpred,train$avg_demand_mgd)
ttarg<-train$avg_demand_mgd
print("Train")
mmetric(ttarg,trainpred,metrics_list)
print("_____________________________________")
# Test
predictions <- mod1%>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
targ<-test$avg_demand_mgd
print("Test")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# 2022
predictions <- mod1%>%
predict(Avg4_2022)
compare <- data.frame(actual = Avg4_2022$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_2022$avg_demand_mgd)
targ<-Avg4_2022$avg_demand_mgd
print("2022")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Spring
predictions <- mod1%>%
predict(Avg4_Sp)
compare <- data.frame(actual = Avg4_Sp$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_Sp$avg_demand_mgd)
targ<-Avg4_Sp$avg_demand_mgd
print("Spring")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Summer
predictions <- mod1%>%
predict(Avg4_Su)
compare <- data.frame(actual = Avg4_Su$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_Su$avg_demand_mgd)
targ<-Avg4_Su$avg_demand_mgd
print("Summer")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Fall
predictions <- mod1%>%
predict(Avg4_F)
compare <- data.frame(actual = Avg4_F$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_F$avg_demand_mgd)
targ<-Avg4_F$avg_demand_mgd
print("Fall")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Winter
predictions <- mod1%>%
predict(Avg4_W)
compare <- data.frame(actual = Avg4_W$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_W$avg_demand_mgd)
targ<-Avg4_W$avg_demand_mgd
print("Winter is coming (House Stark)")
mmetric(targ,predictions,metrics_list)
MLP <- make_Weka_classifier("weka/classifiers/functions/MultilayerPerceptron")
l <- 0.3
m <- 0.2
n <-100
h <- 'a'
mod2 <- MLP(avg_demand_mgd ~ ., data = train, control = Weka_control(L=l,M=m, N=n, H=h))
# Train
trainpred <- mod2%>%
predict(train)
compare <- data.frame(actual = train$avg_demand_mgd,
predicted = trainpred)
error <- RMSE(trainpred,train$avg_demand_mgd)
ttarg<-train$avg_demand_mgd
print("Train")
mmetric(ttarg,trainpred,metrics_list)
print("_____________________________________")
# Test
predictions <- mod2%>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
targ<-test$avg_demand_mgd
print("Test")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# 2022
predictions <- mod2%>%
predict(Avg4_2022)
compare <- data.frame(actual = Avg4_2022$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_2022$avg_demand_mgd)
targ<-Avg4_2022$avg_demand_mgd
print("2022")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Spring
predictions <- mod2%>%
predict(Avg4_Sp)
compare <- data.frame(actual = Avg4_Sp$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_Sp$avg_demand_mgd)
targ<-Avg4_Sp$avg_demand_mgd
print("Spring")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Summer
predictions <- mod2%>%
predict(Avg4_Su)
compare <- data.frame(actual = Avg4_Su$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_Su$avg_demand_mgd)
targ<-Avg4_Su$avg_demand_mgd
print("Summer")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Fall
predictions <- mod2%>%
predict(Avg4_F)
compare <- data.frame(actual = Avg4_F$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_F$avg_demand_mgd)
targ<-Avg4_F$avg_demand_mgd
print("Fall")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Winter
predictions <- mod2%>%
predict(Avg4_W)
compare <- data.frame(actual = Avg4_W$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_W$avg_demand_mgd)
targ<-Avg4_W$avg_demand_mgd
print("Winter is coming (House Stark)")
mmetric(targ,predictions,metrics_list)
mod3 <- IBk(avg_demand_mgd ~ ., data = train, control = Weka_control(K = 35, I= TRUE))
# Train
trainpred <- mod3%>%
predict(train)
compare <- data.frame(actual = train$avg_demand_mgd,
predicted = trainpred)
error <- RMSE(trainpred,train$avg_demand_mgd)
ttarg<-train$avg_demand_mgd
print("Train")
mmetric(ttarg,trainpred,metrics_list)
print("_____________________________________")
# Test
predictions <- mod3%>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
targ<-test$avg_demand_mgd
print("Test")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# 2022
predictions <- mod3%>%
predict(Avg4_2022)
compare <- data.frame(actual = Avg4_2022$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_2022$avg_demand_mgd)
targ<-Avg4_2022$avg_demand_mgd
print("2022")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Spring
predictions <- mod3%>%
predict(Avg4_Sp)
compare <- data.frame(actual = Avg4_Sp$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_Sp$avg_demand_mgd)
targ<-Avg4_Sp$avg_demand_mgd
print("Spring")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Summer
predictions <- mod3%>%
predict(Avg4_Su)
compare <- data.frame(actual = Avg4_Su$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_Su$avg_demand_mgd)
targ<-Avg4_Su$avg_demand_mgd
print("Summer")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Fall
predictions <- mod3%>%
predict(Avg4_F)
compare <- data.frame(actual = Avg4_F$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_F$avg_demand_mgd)
targ<-Avg4_F$avg_demand_mgd
print("Fall")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Winter
predictions <- mod3%>%
predict(Avg4_W)
compare <- data.frame(actual = Avg4_W$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_W$avg_demand_mgd)
targ<-Avg4_W$avg_demand_mgd
print("Winter is coming (House Stark)")
mmetric(targ,predictions,metrics_list)
set.seed(6496)
mod4 <- ksvm(avg_demand_mgd ~ ., data = train, kernal="polydot", C=10)
# Train
trainpred <- mod4%>%
predict(train)
compare <- data.frame(actual = train$avg_demand_mgd,
predicted = trainpred)
error <- RMSE(trainpred,train$avg_demand_mgd)
ttarg<-train$avg_demand_mgd
print("Train")
mmetric(ttarg,trainpred,metrics_list)
print("_____________________________________")
# Test
predictions <- mod4%>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
targ<-test$avg_demand_mgd
print("Test")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# 2022
predictions <- mod4%>%
predict(Avg4_2022)
compare <- data.frame(actual = Avg4_2022$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_2022$avg_demand_mgd)
targ<-Avg4_2022$avg_demand_mgd
print("2022")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Spring
predictions <- mod4%>%
predict(Avg4_Sp)
compare <- data.frame(actual = Avg4_Sp$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_Sp$avg_demand_mgd)
targ<-Avg4_Sp$avg_demand_mgd
print("Spring")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Summer
predictions <- mod4%>%
predict(Avg4_Su)
compare <- data.frame(actual = Avg4_Su$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_Su$avg_demand_mgd)
targ<-Avg4_Su$avg_demand_mgd
print("Summer")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Fall
predictions <- mod4%>%
predict(Avg4_F)
compare <- data.frame(actual = Avg4_F$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_F$avg_demand_mgd)
targ<-Avg4_F$avg_demand_mgd
print("Fall")
mmetric(targ,predictions,metrics_list)
print("_____________________________________")
# Winter
predictions <- mod4%>%
predict(Avg4_W)
compare <- data.frame(actual = Avg4_W$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Avg4_W$avg_demand_mgd)
targ<-Avg4_W$avg_demand_mgd
print("Winter is coming (House Stark)")
mmetric(targ,predictions,metrics_list)
df <- Avg4
target <- 11
seedVal <- 6496
metrics_list = c("R2","MAE","MAPE","RMSE")
cv_function <- function(df, target, nFolds, seedVal, metrics_list)
{
# create folds using the assigned values
set.seed(seedVal)
folds = createFolds(df[,target],nFolds)
# The lapply loop
cv_results <- lapply(folds, function(x)
{
# data preparation:
test_target <- df[x,target]
test_input <- df[x,-target]
train_target <- df[-x,target]
train_input <- df[-x,-target]
model <- mod3
pred <- predict(model, test_input)
return(mmetric(test_target,pred,metrics_list))
})
cv_results_m <- as.matrix(as.data.frame(cv_results))
cv_mean<- as.matrix(rowMeans(cv_results_m))
cv_sd <- as.matrix(rowSds(cv_results_m))
colnames(cv_mean) <- "Mean"
colnames(cv_sd) <- "Sd"
cv_all <- cbind(cv_results_m, cv_mean, cv_sd)
kable(t(cv_all),digits=2)
}
cv_function(Avg4, target, 10, seedVal, metrics_list)
df <- Avg4_W
target <- 11
seedVal <- 6496
metrics_list = c("R2","MAE","MAPE","RMSE")
nFolds = 3
cv_function <- function(df, target, nFolds, seedVal, metrics_list)
{
# create folds using the assigned values
set.seed(seedVal)
folds = createFolds(df[,target],nFolds)
# The lapply loop
cv_results <- lapply(folds, function(x)
{
# data preparation:
test_target <- df[x,target]
test_input <- df[x,-target]
train_target <- df[-x,target]
train_input <- df[-x,-target]
model <- mod3
pred <- predict(model, test_input)
return(mmetric(test_target,pred,metrics_list))
})
cv_results_m <- as.matrix(as.data.frame(cv_results))
cv_mean<- as.matrix(rowMeans(cv_results_m))
cv_sd <- as.matrix(rowSds(cv_results_m))
colnames(cv_mean) <- "Mean"
colnames(cv_sd) <- "Sd"
cv_all <- cbind(cv_results_m, cv_mean, cv_sd)
kable(t(cv_all),digits=2)
}
cv_function(Avg4, target, nFolds, seedVal, metrics_list)
View(Avg4)
View(wd)
