"useful",
"ISOweek",
"kableExtra")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1')%>%#Clifton said this is a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
wd <- merge(wa,sd,by="date")%>%
mutate(weeknum = ISOweek(date))
select(-WeatherDate)
glimpse(wa)
wd <- merge(wa,sd,by="date")%>%
mutate(weeknum = ISOweek(date))
select(-WeatherDate)
wd <- merge(wa,sd,by="date")%>%
mutate(weeknum = ISOweek(date))
select(-WeatherDate )
wd <- merge(wa,sd,by="date")%>%
mutate(weeknum = ISOweek(date))
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate)
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1')%>%#Clifton said this is a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
glimpse(wa)
wd <- merge(wa,sd,by="date")%>%
mutate(weeknum = ISOweek(date))
wd <- merge(wa,sd,by="date")%>%
mutate(weeknum = ISOweek(date))
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate)
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
wa <- read.csv("new_weather_slc_airport.csv")%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))),
RainDays = factor(RainDays),
date = as.Date(WeatherDate,format="%m/%d/%Y"))%>%
filter(CalendarYear>=2020)
sd <- read.csv("new_daily_demand.csv")%>%
rename('avg_demand_cfs' = 'Avg.Daily.Demand..cfs.',
'avg_demand_af' = 'Avg.Daily.Demand..af.',
'avg_demand_mgd' = 'Avg.Daily.Demand..mgd.',
'max_demand_cfs' = 'Max.Daily.Demand..cfs.',
'max_demand_af' = 'Max.Daily.Demand..af.',
'max_demand_mgd' = 'Max.Daily.Demand..mgd.',
'min_demand_cfs' = 'Min.Daily.Demand..cfs.',
'min_demand_af' = 'Min.Daily.Demand..af.',
'min_demand_mgd' = 'Max.Daily.Demand..mgd..1')%>%#Clifton said this is a min
mutate(date = as.Date(ReadDate,format="%m/%d/%Y"))
glimpse(wa)
wd <- merge(wa,sd,by="date")
View(wd)
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate)
View(mgd_avg)
set.seed(6496)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- wd[ti,]
test <- wd[-ti,]
summary(train)
#Add custom functions
#Create function that will average 3 previous rows
moving_avg_3_rows <- function(x){
(lag(x,3) + lag(x,2) + lag(x,1))/3
}
#Create function to calculate R^2
rsq <- function (x, y) cor(x, y) ^ 2
mgd_avg = mgd_avg %>%
mutate(Prev3Day = ifelse(is.na(moving_avg_3_rows(avg_demand_mgd)),avg_demand_mgd,
moving_avg_3_rows(avg_demand_mgd)))
set.seed(6496)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- wd[ti,]
test <- wd[-ti,]
summary(train)
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
View(test)
#Test
Mergi3train <- mgd_avg[training_samples,]
#Test
Mergi3train <- mgd_avg[ti,]
Mergi3test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=Mergi3train)
predictions <- mod3 %>%
predict(Mergi3test)
View(Mergi3test)
Mergi3test = Mergi3test %>%
select(-one_of('RainDays'))
predictions <- mod3 %>%
predict(Mergi3test)
#Test
Mergi3train <- mgd_avg[ti,]
Mergi3test <- mgd_avg[-ti,]
Mergi3test = Mergi3test %>%
select(-one_of('RainDays'))
Mergi3train = Mergi3train %>%
select(-one_of('RainDays'))
mod3 <- lm(avg_demand_mgd ~., data=Mergi3train)
predictions <- mod3 %>%
predict(Mergi3test)
remove(Mergi3test)
remove(Mergi3train)
remove(mod3)
mgd_avg = mgd_avg %>%
mutate(Prev3Day = ifelse(is.na(moving_avg_3_rows(avg_demand_mgd)),avg_demand_mgd,
moving_avg_3_rows(avg_demand_mgd)))
mgd_avg = mgd_avg %>%
select(-one_of('ReadDate'))
#Test
Mergi3train <- mgd_avg[ti,]
Mergi3test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=Mergi3train)
predictions <- mod3 %>%
predict(Mergi3test)
compare <- data.frame(actual = Mergi3test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Mergi3test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate,-readDate)
wd <- merge(wa,sd,by="date")
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate,-readDate)
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate,-ReadDate)
set.seed(6496)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
summary(train)
#Add column for 3 day average
mgd_avg = mgd_avg %>%
mutate(Prev3Day = ifelse(is.na(moving_avg_3_rows(avg_demand_mgd)),avg_demand_mgd,
moving_avg_3_rows(avg_demand_mgd)))
#Test
Mergi3train <- mgd_avg[ti,]
Mergi3test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=Mergi3train)
predictions <- mod3 %>%
predict(Mergi3test)
compare <- data.frame(actual = Mergi3test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Mergi3test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
set.seed(6496)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#summary(train)
set.seed(123)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#summary(train)
set.seed(156)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#summary(train)
set.seed(6496)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#summary(train)
mod3 <- lm(avg_demand_mgd ~., data=Mergi3train)
predictions <- mod3 %>%
predict(Mergi3train)
compare <- data.frame(actual = Mergi3train$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Mergi3train$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
set.seed(6496)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#summary(train)
#Add column for 3 day average
mgd_avg = mgd_avg %>%
mutate(Prev3Day = ifelse(is.na(moving_avg_3_rows(avg_demand_mgd)),avg_demand_mgd,
moving_avg_3_rows(avg_demand_mgd)))
#Test
Mergi3train <- mgd_avg[ti,]
Mergi3test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=Mergi3train)
predictions <- mod3 %>%
predict(Mergi3train)
compare <- data.frame(actual = Mergi3train$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,Mergi3train$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
set.seed(6496)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.6,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#summary(train)
set.seed(6496)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.5,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#summary(train)
set.seed(6496)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.8,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#summary(train)
set.seed(6496)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#summary(train)
wd <- merge(wa,sd,by="date")
mgd_avg <- wd%>%
select(-avg_demand_cfs,
-avg_demand_af,
#-avg_demand_mgd, ## Target Variable
-max_demand_cfs,
-max_demand_af,
-max_demand_mgd,
-min_demand_cfs,
-min_demand_af,
-min_demand_mgd)%>%
select(-WeatherDate,-ReadDate)
#Add column for 3 day average
mgd_avg = mgd_avg %>%
mutate(Prev3Day = ifelse(is.na(moving_avg_3_rows(Precipitation)),Precipitation,
moving_avg_3_rows(Precipitation)))
set.seed(6496)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#summary(train)
set.seed(123)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#summary(train)
set.seed(156)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#summary(train)
set.seed(6496)
ti <- createDataPartition(mgd_avg$avg_demand_mgd, p=0.7,
list = FALSE)
train <- mgd_avg[ti,]
test <- mgd_avg[-ti,]
mod3 <- lm(avg_demand_mgd ~., data=train)
predictions <- mod3 %>%
predict(test)
compare <- data.frame(actual = test$avg_demand_mgd,
predicted = predictions)
error <- RMSE(predictions,test$avg_demand_mgd)
rsq(compare$actual,compare$predicted)
#summary(train)
View(train)
