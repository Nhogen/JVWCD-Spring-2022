theme(axis.text.x = element_text(angle = 90))+
ggtitle("Precipitation by Week Number")
#Seems a bit sporadic
#shift column so that list shows prior week precipitation
weekref = shift.column(weekref,columns = "weekfall",len = 1L,up=TRUE)
weekref = weekref[,c(1,3)]
weekref = weekref %>%
rename(prevweekfall = weekfall.Shifted)
#Merge list to create column showing rainfall by previous week
Merged_Data_Prevweek = merge(merginated,weekref,by.x = "weeknum",by.y = "weeknum",all.y = TRUE,all.x = TRUE)
mergiweek=Merged_Data_Prevweek[,c(2,3,4,6,7,8,9)]
merwod<-lm(avgdaily_demand~.,data = mergiweek)
#Simple regression showing variables with previous week rainfall included
summary(merwod)
#Does seem to be significant
#Remove temp data frames
remove(mergiweek,weekref,merwod,mermod,mersd,merweth,mershrink,merginated)
wd%>%
group_by(TemperatureMean)%>%
summarise(mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
ggplot(aes(TemperatureMean, avg_demand))+
geom_line()+
theme_minimal()
wd%>%
group_by(SnowDepth)%>%
summarise(mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
ggplot(aes(SnowDepth, avg_demand))+
geom_col()+
theme_minimal()
wd%>%
group_by(RainDays)%>%
mutate(count_of_days = 1)%>%
summarise(count_of_days = sum(count_of_days),
mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')
wd%>%
group_by(RainDays)%>%
mutate(count_of_days = 1)%>%
summarise(count_of_days = sum(count_of_days),
mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
kable() %>%
kable_styling(full_width = FALSE)
wd%>%
group_by(RainDays)%>%
mutate(count_of_days = 1)%>%
summarise(count_of_days = sum(count_of_days),
mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
kable()
wd%>%
group_by(RainDays)%>%
mutate(count_of_days = 1)%>%
summarise(Days = sum(count_of_days),
mean(daily_demand))%>%
rename(Average Demand = 'mean(daily_demand)')%>%
wd%>%
group_by(RainDays)%>%
mutate(count_of_days = 1)%>%
summarise(Days = sum(count_of_days),
mean(daily_demand))%>%
rename(Average_Demand = 'mean(daily_demand)')%>%
kable()
wd%>%
mutate(snow_day = ifelse(SnowFall>0,1,0))%>%
group_by(snow_day)%>%
mutate(count_of_days = 1)%>%
summarise(count_of_days = sum(count_of_days),
mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')
wd%>%
mutate(snow_day = ifelse(SnowFall>0,1,0))%>%
group_by(snow_day)%>%
mutate(count_of_days = 1)%>%
summarise(count_of_days = sum(count_of_days),
mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
kable()
wd%>%
group_by(RainDays)%>%
mutate(count_of_days = 1)%>%
summarise(count_of_days = sum(count_of_days),
mean(daily_demand))%>%
rename(Average_Demand = 'mean(daily_demand)')%>%
kable()
wd%>%
group_by(RainDays)%>%
mutate(count_of_days = 1)%>%
summarise(count_of_days = sum(count_of_days),
mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
kable()
wdn <- wd%>%
select_if(is.numeric)
#an attempt to manually look at the most important numberic vars
cwdn <- cor(wdn, use="pairwise.complete.obs")
cwdn1 <- data.frame(sort(cwdn[,'daily_demand'], decreasing = TRUE))
cwdn1%>%
rename(Correlation = "sort.cwdn....daily_demand....decreasing...TRUE.")
wdn <- wd%>%
select_if(is.numeric)
#an attempt to manually look at the most important numberic vars
cwdn <- cor(wdn, use="pairwise.complete.obs")
cwdn1 <- data.frame(sort(cwdn[,'daily_demand'], decreasing = TRUE))
cwdn1%>%
rename(Correlation = "sort.cwdn....daily_demand....decreasing...TRUE.")%>%
kable()
#Correlation Plot
#Calculate correlation
dfcor <- cor(wdn[,unlist(lapply(df, is.numeric))])
#Plot the correlation
#Only Select Numeric Variables
df_numericVars <- which(sapply(wdn, is.numeric))
#correlations of all numeric variables
df_numVar <- wdn[, df_numericVars]
df_cor_numVar <- cor(df_numVar, use="pairwise.complete.obs")
# Correlation of numeric variables with their numbers and shap/color relation to sale price
corrplot.mixed(df_cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7)
corrplot(df_cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7, method = "number")
head(wa)
kable(head(wa))
kable(head(wd))
wdn <- wd%>%
select_if(is.numeric)
#an attempt to manually look at the most important numberic vars
cwdn <- cor(wdn, use="pairwise.complete.obs")
cwdn1 <- data.frame(sort(cwdn[,'daily_demand'], decreasing = TRUE))
kable(head(wdn))
cwdn1%>%
rename(Correlation = "sort.cwdn....daily_demand....decreasing...TRUE.")%>%
kable()
#Calculate correlation
dfcor <- cor(wdn[,unlist(lapply(df, is.numeric))])
#Plot the correlation
#Only Select Numeric Variables
df_numericVars <- which(sapply(wdn, is.numeric))
#correlations of all numeric variables
df_numVar <- wdn[, df_numericVars]
df_cor_numVar <- cor(df_numVar, use="pairwise.complete.obs")
# Correlation of numeric variables with their numbers and shape/color relation to sale price
corrplot.mixed(df_cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7)
corrplot(df_cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7, method = "number")
corrplot.mixed(cwdn1, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7)
#Calculate correlation
dfcor <- cor(wdn[,unlist(lapply(df, is.numeric))])
#Plot the correlation
#Only Select Numeric Variables
df_numericVars <- which(sapply(wdn, is.numeric))
#correlations of all numeric variables
df_numVar <- wdn[, df_numericVars]
df_cor_numVar <- cor(df_numVar, use="pairwise.complete.obs")
# Correlation of numeric variables with their numbers and shape/color relation to sale price
corrplot.mixed(df_cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7)
corrplot(df_cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7, method = "number")
cwdn1%>%
rename(Correlation = "sort.cwdn....daily_demand....decreasing...TRUE.")%>%
kable()
wdn <- wd%>%
select_if(is.numeric)
#an attempt to manually look at the most important numberic vars
cwdn <- cor(wdn, use="pairwise.complete.obs")
cwdn1 <- data.frame(sort(cwdn[,'daily_demand'], decreasing = TRUE))
kable(head(wdn))
kable(head(sd))
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse",
"lubridate",
"chron",
"knitr",
"corrplot",
"caret",
"scales",
"gridExtra",
"useful",
"ISOweek",
"kableExtra")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(lubridate)
library(chron)
library(knitr)
library(corrplot)
library(caret)
library(scales)
library(gridExtra)
library(useful)
library(ISOweek)
library(kableExtra)
#read in data. Change names to be more readable and make hourly demand numeric
sd <- read.csv("2_year_system_demand.csv")%>%
rename('hourly_demand' = 'Hourly.Demand..cfs.',
'date_time' = 'Read.Date.Time')%>%
mutate(hourly_demand = as.numeric(hourly_demand),
hourly_demand = ifelse(is.na(hourly_demand),0,hourly_demand)) #What do we do with NA's???
#Make Date and Time match a consistent format with the Weather Data
sd2 <- as.data.frame(str_split_fixed(sd$date_time, " ", 3))%>%
rename(date = V1, time = V2, am_or_pm = V3)%>%
mutate(datetime_str = paste(date, time, am_or_pm),
datetime = as.POSIXct(strptime(datetime_str, format = "%m/%d/%y %I:%M %p")),
datetime_military = strftime(datetime, format = "%m/%d/%Y %H:%M")) %>%
select(datetime,datetime_military)
sd3 <-as.data.frame(str_split_fixed(sd2$datetime_military, " ", 2))%>%
rename(date = V1, time = V2)
sd4 <-as.data.frame(str_split_fixed(sd3$date, "/", 3))%>%
rename(CalendarMonth = V1,  CalendarDay = V2, CalendarYear = V3)
#Throw it all together
sd <- cbind(sd,sd2,sd3,sd4)%>%
select(-date_time)
#Get rid of temp dfs
remove(sd2,sd3,sd4)
#The names and dates in this table do not need much conversion
wa <- read.csv("weather_sl_airport.csv")
sp <- read.csv("system_demand_by_point_type.csv")%>%
rename('date_time' = 'Read.Date.Time',
'well_flow_cfs' = 'Well.Flow..cfs.',
'purchased_flow_cfs' = 'Purchased.Flow..cfs.',
'transported_flow_cfs' = 'Transported.Flow..cfs.',
'treated_flow_cfs' = 'Treated.Flow..cfs.',
'injected_flow_cfs' = 'Injected.Flow..cfs.',
'reservoir_trend_cfs' = 'Reservoir.Trend..cfs.',)
#Make Date and Time match a consistant format with the Weather Data
sp2 <- as.data.frame(str_split_fixed(sp$date_time, " ", 3))%>%
rename(date = V1, time = V2, am_or_pm = V3)%>%
mutate(datetime_str = paste(date, time, am_or_pm),
datetime = as.POSIXct(strptime(datetime_str, format = "%m/%d/%y %I:%M %p")),
datetime_military = strftime(datetime, format = "%m/%d/%Y %H:%M")) %>%
select(datetime,datetime_military)
sp3 <-as.data.frame(str_split_fixed(sp2$datetime_military, " ", 2))%>%
rename(date = V1, time = V2)
sp4 <-as.data.frame(str_split_fixed(sp3$date, "/", 3))%>%
rename(CalendarMonth = V1,  CalendarDay = V2, CalendarYear = V3)
#Throw it all together
sp <- cbind(sp,sp2,sp3,sp4)%>%
mutate(reservoir_trend_cfs = as.numeric(reservoir_trend_cfs))%>%
select(-date_time)
#Get rid of temp dfs
remove(sp2,sp3,sp4)
sd %>%
filter(hourly_demand<0)
sd %>%
group_by(CalendarDay) %>%
summarize(count=n())
sd[sd$time %in% "",]
sd <- sd%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))))%>%
filter(season != '0')
sp <- sp%>%
mutate(season = ifelse(CalendarMonth %in% c('03','04','05'), 'Spring',
ifelse(CalendarMonth %in% c('06','07','08'), 'Summer',
ifelse(CalendarMonth %in% c('09','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','01','02'), 'Winter','0')))))%>%
filter(season != '0')
wa <- wa%>%
mutate(season = ifelse(CalendarMonth %in% c('3','4','5'), 'Spring',
ifelse(CalendarMonth %in% c('6','7','8'), 'Summer',
ifelse(CalendarMonth %in% c('9','10','11'), 'Fall',
ifelse(CalendarMonth %in% c('12','1','2'), 'Winter','0')))))%>%
filter(season != '0')
#Snapshot View
sd1 <- sd%>%
group_by(date)%>%
summarise(daily_demand = mean(hourly_demand),
CalendarMonth = CalendarMonth,
CalendarDay = CalendarDay,
CalendarYear = CalendarYear,
season = season)
wa1 <- wa%>%
select(-CalendarYear,-CalendarMonth,-CalendarDay,-season)%>%
rename(date = WeatherDate)
wd <- merge(wa1,sd1,by="date")
# Factor RainDays
wd <- wd%>%
mutate(RainDays = factor(RainDays))
#Get rid of temp dfs
remove(sd1,sd2,wa1)
summary(wd)
#Weather data begins prior to 2020 where the system data begins. Truncate for merging
merweth=wa %>%
filter(CalendarYear>=2020)
#Date column is a character. Convert to date
merweth=merweth %>%
mutate(WeatherDate = as.Date(WeatherDate,format="%m/%d/%Y"))
#Date column is in POSIXct format. Convert to date
mersd=sd %>%
mutate(ActualDate = as.Date(paste(as.numeric(sd$CalendarMonth),
as.numeric(sd$CalendarDay),
as.numeric(sd$CalendarYear),
sep="-"),
format="%m-%d-%Y"))
#Change hourly_demand to avg_daily demand for merge
mershrink=mersd %>%
group_by(ActualDate) %>%
summarize(avgdaily_demand = mean(hourly_demand))
#remove NA at the bottom
mershrink=mershrink[1:731,]
#Merge Datasets
merginated = merge(mershrink,merweth,by.x = "ActualDate",
by.y = "WeatherDate",all.y = TRUE,
all.x = FALSE)
sd2 <- as.data.frame(str_split_fixed(sd$time,':',2))%>%
rename(Hour = V1, Min = V2)
sd <- cbind(sd,sd2)
remove(sd2)
kable(head(sd))
glimpse(sd)
summary(sd)
ggplot(sd,aes(hourly_demand))+
geom_histogram()+
theme_minimal()
ggplot(sd,aes(hourly_demand))+
geom_histogram()+
theme_minimal()+
facet_wrap(~CalendarMonth)
ggplot(sd,aes(hourly_demand))+
geom_histogram()+
theme_minimal()+
facet_wrap(~season)
ggplot(sd,aes(hourly_demand))+
geom_histogram()+
theme_minimal()+
facet_wrap(~CalendarYear)
sd%>%
group_by(Hour)%>%
summarise(mean(hourly_demand))%>%
rename(avg_demand = 'mean(hourly_demand)')%>%
ggplot(aes(Hour, avg_demand))+
geom_col()+
theme_minimal()
sd%>%
group_by(season,Hour)%>%
summarise(mean(hourly_demand))%>%
rename(avg_demand = 'mean(hourly_demand)')%>%
ggplot(aes(Hour, avg_demand))+
geom_col()+
theme_minimal()+
facet_wrap(~season)
sd%>%
group_by(season)%>%
summarise(mean(hourly_demand))%>%
rename(avg_demand = 'mean(hourly_demand)')%>%
ggplot(aes(season, avg_demand))+
geom_col()+
theme_minimal()
sd%>%
group_by(CalendarMonth)%>%
summarise(mean(hourly_demand))%>%
rename(avg_demand = 'mean(hourly_demand)')%>%
ggplot(aes(CalendarMonth, avg_demand))+
geom_col()+
theme_minimal()
sd%>%
group_by(CalendarYear)%>%
summarise(sum(hourly_demand))%>%
rename(Sum_of_demand = 'sum(hourly_demand)')%>%
ggplot(aes(CalendarYear, Sum_of_demand))+
geom_col()+
theme_minimal()
kable(head(sp))
glimpse(sp)
summary(sp)
sp%>%
group_by(season)%>%
summarise(mean(well_flow_cfs))%>%
rename(avg_demand = 'mean(well_flow_cfs)')%>%
ggplot(aes(season, avg_demand))+
geom_col()+
theme_minimal()
sp%>%
group_by(season)%>%
summarise(mean(purchased_flow_cfs))%>%
rename(avg_demand = 'mean(purchased_flow_cfs)')%>%
ggplot(aes(season, avg_demand))+
geom_col()+
theme_minimal()
sp%>%
group_by(season)%>%
summarise(mean(transported_flow_cfs))%>%
rename(avg_demand = 'mean(transported_flow_cfs)')%>%
ggplot(aes(season, avg_demand))+
geom_col()+
theme_minimal()
sp%>%
group_by(season)%>%
summarise(mean(treated_flow_cfs))%>%
rename(avg_demand = 'mean(treated_flow_cfs)')%>%
ggplot(aes(season, avg_demand))+
geom_col()+
theme_minimal()
sp%>%
group_by(season)%>%
summarise(mean(injected_flow_cfs))%>%
rename(avg_demand = 'mean(injected_flow_cfs)')%>%
ggplot(aes(season, avg_demand))+
geom_col()+
theme_minimal()
ggplot(sp,aes(injected_flow_cfs))+
geom_histogram()+
theme_minimal()
sp%>%
group_by(season)%>%
summarise(sum(reservoir_trend_cfs))%>%
rename(sum_of_demand = 'sum(reservoir_trend_cfs)')%>%
ggplot(aes(season, sum_of_demand))+
geom_col()+
theme_minimal()
ggplot(sp,aes(reservoir_trend_cfs))+
geom_histogram()+
theme_minimal()
kable(head(wa))
glimpse(wa)
summary(wa)
#Clear out redundant columns
merginated=merginated[,c(1,2,8,9,12,13,14)]
mermod<-lm(avgdaily_demand~.,data = merginated)
summary(mermod)
#Here we can see that Precipitation has a p value of 0.09. logically rain
#coming same day should not affect as much as recent days (within a week or so)
#Create ISO week number identifier column
merginated = merginated %>%
mutate(weeknum = ISOweek(ActualDate))
#Create list to show precipitation for a given ISO week number
weekref = merginated %>%
group_by(weeknum) %>%
summarize(weekfall = sum(Precipitation))
#Visualize
weekref %>%
ggplot(aes(weeknum,weekfall))+
geom_col()+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("Precipitation by Week Number")
#Seems a bit sporadic
#shift column so that list shows prior week precipitation
weekref = shift.column(weekref,columns = "weekfall",len = 1L,up=TRUE)
weekref = weekref[,c(1,3)]
weekref = weekref %>%
rename(prevweekfall = weekfall.Shifted)
#Merge list to create column showing rainfall by previous week
Merged_Data_Prevweek = merge(merginated,weekref,by.x = "weeknum",by.y = "weeknum",all.y = TRUE,all.x = TRUE)
mergiweek=Merged_Data_Prevweek[,c(2,3,4,6,7,8,9)]
merwod<-lm(avgdaily_demand~.,data = mergiweek)
#Simple regression showing variables with previous week rainfall included
summary(merwod)
#Does seem to be significant
#Remove temp data frames
remove(mergiweek,weekref,merwod,mermod,mersd,merweth,mershrink,merginated)
wd%>%
group_by(TemperatureMean)%>%
summarise(mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
ggplot(aes(TemperatureMean, avg_demand))+
geom_line()+
theme_minimal()
wd%>%
group_by(SnowDepth)%>%
summarise(mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
ggplot(aes(SnowDepth, avg_demand))+
geom_col()+
theme_minimal()
wd%>%
group_by(RainDays)%>%
mutate(count_of_days = 1)%>%
summarise(count_of_days = sum(count_of_days),
mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
kable()
wd%>%
mutate(snow_day = ifelse(SnowFall>0,1,0))%>%
group_by(snow_day)%>%
mutate(count_of_days = 1)%>%
summarise(count_of_days = sum(count_of_days),
mean(daily_demand))%>%
rename(avg_demand = 'mean(daily_demand)')%>%
kable()
wdn <- wd%>%
select_if(is.numeric)
#an attempt to manually look at the most important numberic vars
cwdn <- cor(wdn, use="pairwise.complete.obs")
cwdn1 <- data.frame(sort(cwdn[,'daily_demand'], decreasing = TRUE))
kable(head(wdn))
cwdn1%>%
rename(Correlation = "sort.cwdn....daily_demand....decreasing...TRUE.")%>%
kable()
#Calculate correlation
dfcor <- cor(wdn[,unlist(lapply(df, is.numeric))])
#Plot the correlation
#Only Select Numeric Variables
df_numericVars <- which(sapply(wdn, is.numeric))
#correlations of all numeric variables
df_numVar <- wdn[, df_numericVars]
df_cor_numVar <- cor(df_numVar, use="pairwise.complete.obs")
# Correlation of numeric variables with their numbers and shape/color relation to sale price
corrplot.mixed(df_cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7)
corrplot(df_cor_numVar, tl.col="black", tl.pos = "lt", tl.cex = 0.7,cl.cex = .7, number.cex=.7, method = "number")
ggplot(wdn, aes(log(TemperatureMean),log(daily_demand)))+
geom_point()+ stat_smooth(method="lm", se=FALSE)+
theme_minimal()
ggplot(wdn, aes(log(Precipitation),log(daily_demand)))+
geom_point()+ stat_smooth(method="lm", se=FALSE)+
theme_minimal()
ggplot(wdn, aes(log(SnowFall),log(daily_demand)))+
geom_point()+ stat_smooth(method="lm", se=FALSE)+
theme_minimal()
ggplot(wdn, aes(log(CoolingDegreeDays),log(daily_demand)))+
geom_point()+ stat_smooth(method="lm", se=FALSE)+
theme_minimal()
